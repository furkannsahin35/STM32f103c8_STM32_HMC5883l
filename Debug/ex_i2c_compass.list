
ex_i2c_compass.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002718  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08002824  08002824  00012824  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002850  08002850  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002850  08002850  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002850  08002850  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002850  08002850  00012850  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002854  08002854  00012854  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002858  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000090  2000000c  08002864  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000009c  08002864  0002009c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a48d  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000015e5  00000000  00000000  0002a4c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000640  00000000  00000000  0002baa8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000005a8  00000000  00000000  0002c0e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000142f1  00000000  00000000  0002c690  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006113  00000000  00000000  00040981  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006b042  00000000  00000000  00046a94  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b1ad6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001948  00000000  00000000  000b1b54  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800280c 	.word	0x0800280c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	0800280c 	.word	0x0800280c

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	; 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000208:	f1a2 0201 	sub.w	r2, r2, #1
 800020c:	d1ed      	bne.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ba:	2afd      	cmp	r2, #253	; 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	; 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	; 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	; 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__aeabi_f2uiz>:
 8000608:	0042      	lsls	r2, r0, #1
 800060a:	d20e      	bcs.n	800062a <__aeabi_f2uiz+0x22>
 800060c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000610:	d30b      	bcc.n	800062a <__aeabi_f2uiz+0x22>
 8000612:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000616:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800061a:	d409      	bmi.n	8000630 <__aeabi_f2uiz+0x28>
 800061c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000620:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000624:	fa23 f002 	lsr.w	r0, r3, r2
 8000628:	4770      	bx	lr
 800062a:	f04f 0000 	mov.w	r0, #0
 800062e:	4770      	bx	lr
 8000630:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000634:	d101      	bne.n	800063a <__aeabi_f2uiz+0x32>
 8000636:	0242      	lsls	r2, r0, #9
 8000638:	d102      	bne.n	8000640 <__aeabi_f2uiz+0x38>
 800063a:	f04f 30ff 	mov.w	r0, #4294967295
 800063e:	4770      	bx	lr
 8000640:	f04f 0000 	mov.w	r0, #0
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop

08000648 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800064c:	4b08      	ldr	r3, [pc, #32]	; (8000670 <HAL_Init+0x28>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	4a07      	ldr	r2, [pc, #28]	; (8000670 <HAL_Init+0x28>)
 8000652:	f043 0310 	orr.w	r3, r3, #16
 8000656:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000658:	2003      	movs	r0, #3
 800065a:	f000 f907 	bl	800086c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800065e:	2000      	movs	r0, #0
 8000660:	f000 f808 	bl	8000674 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000664:	f001 ffb2 	bl	80025cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000668:	2300      	movs	r3, #0
}
 800066a:	4618      	mov	r0, r3
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	40022000 	.word	0x40022000

08000674 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800067c:	4b12      	ldr	r3, [pc, #72]	; (80006c8 <HAL_InitTick+0x54>)
 800067e:	681a      	ldr	r2, [r3, #0]
 8000680:	4b12      	ldr	r3, [pc, #72]	; (80006cc <HAL_InitTick+0x58>)
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	4619      	mov	r1, r3
 8000686:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800068a:	fbb3 f3f1 	udiv	r3, r3, r1
 800068e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000692:	4618      	mov	r0, r3
 8000694:	f000 f911 	bl	80008ba <HAL_SYSTICK_Config>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800069e:	2301      	movs	r3, #1
 80006a0:	e00e      	b.n	80006c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	2b0f      	cmp	r3, #15
 80006a6:	d80a      	bhi.n	80006be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006a8:	2200      	movs	r2, #0
 80006aa:	6879      	ldr	r1, [r7, #4]
 80006ac:	f04f 30ff 	mov.w	r0, #4294967295
 80006b0:	f000 f8e7 	bl	8000882 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006b4:	4a06      	ldr	r2, [pc, #24]	; (80006d0 <HAL_InitTick+0x5c>)
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80006ba:	2300      	movs	r3, #0
 80006bc:	e000      	b.n	80006c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80006be:	2301      	movs	r3, #1
}
 80006c0:	4618      	mov	r0, r3
 80006c2:	3708      	adds	r7, #8
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	20000008 	.word	0x20000008
 80006cc:	20000004 	.word	0x20000004
 80006d0:	20000000 	.word	0x20000000

080006d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006d4:	b480      	push	{r7}
 80006d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006d8:	4b05      	ldr	r3, [pc, #20]	; (80006f0 <HAL_IncTick+0x1c>)
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	461a      	mov	r2, r3
 80006de:	4b05      	ldr	r3, [pc, #20]	; (80006f4 <HAL_IncTick+0x20>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	4413      	add	r3, r2
 80006e4:	4a03      	ldr	r2, [pc, #12]	; (80006f4 <HAL_IncTick+0x20>)
 80006e6:	6013      	str	r3, [r2, #0]
}
 80006e8:	bf00      	nop
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bc80      	pop	{r7}
 80006ee:	4770      	bx	lr
 80006f0:	20000004 	.word	0x20000004
 80006f4:	20000030 	.word	0x20000030

080006f8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0
  return uwTick;
 80006fc:	4b02      	ldr	r3, [pc, #8]	; (8000708 <HAL_GetTick+0x10>)
 80006fe:	681b      	ldr	r3, [r3, #0]
}
 8000700:	4618      	mov	r0, r3
 8000702:	46bd      	mov	sp, r7
 8000704:	bc80      	pop	{r7}
 8000706:	4770      	bx	lr
 8000708:	20000030 	.word	0x20000030

0800070c <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800070c:	b480      	push	{r7}
 800070e:	b085      	sub	sp, #20
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	f003 0307 	and.w	r3, r3, #7
 800071a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800071c:	4b0c      	ldr	r3, [pc, #48]	; (8000750 <NVIC_SetPriorityGrouping+0x44>)
 800071e:	68db      	ldr	r3, [r3, #12]
 8000720:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000722:	68ba      	ldr	r2, [r7, #8]
 8000724:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000728:	4013      	ands	r3, r2
 800072a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000730:	68bb      	ldr	r3, [r7, #8]
 8000732:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000734:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000738:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800073c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800073e:	4a04      	ldr	r2, [pc, #16]	; (8000750 <NVIC_SetPriorityGrouping+0x44>)
 8000740:	68bb      	ldr	r3, [r7, #8]
 8000742:	60d3      	str	r3, [r2, #12]
}
 8000744:	bf00      	nop
 8000746:	3714      	adds	r7, #20
 8000748:	46bd      	mov	sp, r7
 800074a:	bc80      	pop	{r7}
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop
 8000750:	e000ed00 	.word	0xe000ed00

08000754 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000758:	4b04      	ldr	r3, [pc, #16]	; (800076c <NVIC_GetPriorityGrouping+0x18>)
 800075a:	68db      	ldr	r3, [r3, #12]
 800075c:	0a1b      	lsrs	r3, r3, #8
 800075e:	f003 0307 	and.w	r3, r3, #7
}
 8000762:	4618      	mov	r0, r3
 8000764:	46bd      	mov	sp, r7
 8000766:	bc80      	pop	{r7}
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop
 800076c:	e000ed00 	.word	0xe000ed00

08000770 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000770:	b480      	push	{r7}
 8000772:	b083      	sub	sp, #12
 8000774:	af00      	add	r7, sp, #0
 8000776:	4603      	mov	r3, r0
 8000778:	6039      	str	r1, [r7, #0]
 800077a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 800077c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000780:	2b00      	cmp	r3, #0
 8000782:	da0b      	bge.n	800079c <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000784:	683b      	ldr	r3, [r7, #0]
 8000786:	b2da      	uxtb	r2, r3
 8000788:	490c      	ldr	r1, [pc, #48]	; (80007bc <NVIC_SetPriority+0x4c>)
 800078a:	79fb      	ldrb	r3, [r7, #7]
 800078c:	f003 030f 	and.w	r3, r3, #15
 8000790:	3b04      	subs	r3, #4
 8000792:	0112      	lsls	r2, r2, #4
 8000794:	b2d2      	uxtb	r2, r2
 8000796:	440b      	add	r3, r1
 8000798:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800079a:	e009      	b.n	80007b0 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800079c:	683b      	ldr	r3, [r7, #0]
 800079e:	b2da      	uxtb	r2, r3
 80007a0:	4907      	ldr	r1, [pc, #28]	; (80007c0 <NVIC_SetPriority+0x50>)
 80007a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007a6:	0112      	lsls	r2, r2, #4
 80007a8:	b2d2      	uxtb	r2, r2
 80007aa:	440b      	add	r3, r1
 80007ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80007b0:	bf00      	nop
 80007b2:	370c      	adds	r7, #12
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bc80      	pop	{r7}
 80007b8:	4770      	bx	lr
 80007ba:	bf00      	nop
 80007bc:	e000ed00 	.word	0xe000ed00
 80007c0:	e000e100 	.word	0xe000e100

080007c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007c4:	b480      	push	{r7}
 80007c6:	b089      	sub	sp, #36	; 0x24
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	60f8      	str	r0, [r7, #12]
 80007cc:	60b9      	str	r1, [r7, #8]
 80007ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	f003 0307 	and.w	r3, r3, #7
 80007d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007d8:	69fb      	ldr	r3, [r7, #28]
 80007da:	f1c3 0307 	rsb	r3, r3, #7
 80007de:	2b04      	cmp	r3, #4
 80007e0:	bf28      	it	cs
 80007e2:	2304      	movcs	r3, #4
 80007e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007e6:	69fb      	ldr	r3, [r7, #28]
 80007e8:	3304      	adds	r3, #4
 80007ea:	2b06      	cmp	r3, #6
 80007ec:	d902      	bls.n	80007f4 <NVIC_EncodePriority+0x30>
 80007ee:	69fb      	ldr	r3, [r7, #28]
 80007f0:	3b03      	subs	r3, #3
 80007f2:	e000      	b.n	80007f6 <NVIC_EncodePriority+0x32>
 80007f4:	2300      	movs	r3, #0
 80007f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007f8:	f04f 32ff 	mov.w	r2, #4294967295
 80007fc:	69bb      	ldr	r3, [r7, #24]
 80007fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000802:	43da      	mvns	r2, r3
 8000804:	68bb      	ldr	r3, [r7, #8]
 8000806:	401a      	ands	r2, r3
 8000808:	697b      	ldr	r3, [r7, #20]
 800080a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800080c:	f04f 31ff 	mov.w	r1, #4294967295
 8000810:	697b      	ldr	r3, [r7, #20]
 8000812:	fa01 f303 	lsl.w	r3, r1, r3
 8000816:	43d9      	mvns	r1, r3
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800081c:	4313      	orrs	r3, r2
         );
}
 800081e:	4618      	mov	r0, r3
 8000820:	3724      	adds	r7, #36	; 0x24
 8000822:	46bd      	mov	sp, r7
 8000824:	bc80      	pop	{r7}
 8000826:	4770      	bx	lr

08000828 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	3b01      	subs	r3, #1
 8000834:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000838:	d301      	bcc.n	800083e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800083a:	2301      	movs	r3, #1
 800083c:	e00f      	b.n	800085e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800083e:	4a0a      	ldr	r2, [pc, #40]	; (8000868 <SysTick_Config+0x40>)
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	3b01      	subs	r3, #1
 8000844:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000846:	210f      	movs	r1, #15
 8000848:	f04f 30ff 	mov.w	r0, #4294967295
 800084c:	f7ff ff90 	bl	8000770 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000850:	4b05      	ldr	r3, [pc, #20]	; (8000868 <SysTick_Config+0x40>)
 8000852:	2200      	movs	r2, #0
 8000854:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000856:	4b04      	ldr	r3, [pc, #16]	; (8000868 <SysTick_Config+0x40>)
 8000858:	2207      	movs	r2, #7
 800085a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800085c:	2300      	movs	r3, #0
}
 800085e:	4618      	mov	r0, r3
 8000860:	3708      	adds	r7, #8
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	e000e010 	.word	0xe000e010

0800086c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000874:	6878      	ldr	r0, [r7, #4]
 8000876:	f7ff ff49 	bl	800070c <NVIC_SetPriorityGrouping>
}
 800087a:	bf00      	nop
 800087c:	3708      	adds	r7, #8
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}

08000882 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000882:	b580      	push	{r7, lr}
 8000884:	b086      	sub	sp, #24
 8000886:	af00      	add	r7, sp, #0
 8000888:	4603      	mov	r3, r0
 800088a:	60b9      	str	r1, [r7, #8]
 800088c:	607a      	str	r2, [r7, #4]
 800088e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000890:	2300      	movs	r3, #0
 8000892:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000894:	f7ff ff5e 	bl	8000754 <NVIC_GetPriorityGrouping>
 8000898:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800089a:	687a      	ldr	r2, [r7, #4]
 800089c:	68b9      	ldr	r1, [r7, #8]
 800089e:	6978      	ldr	r0, [r7, #20]
 80008a0:	f7ff ff90 	bl	80007c4 <NVIC_EncodePriority>
 80008a4:	4602      	mov	r2, r0
 80008a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008aa:	4611      	mov	r1, r2
 80008ac:	4618      	mov	r0, r3
 80008ae:	f7ff ff5f 	bl	8000770 <NVIC_SetPriority>
}
 80008b2:	bf00      	nop
 80008b4:	3718      	adds	r7, #24
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}

080008ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008ba:	b580      	push	{r7, lr}
 80008bc:	b082      	sub	sp, #8
 80008be:	af00      	add	r7, sp, #0
 80008c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008c2:	6878      	ldr	r0, [r7, #4]
 80008c4:	f7ff ffb0 	bl	8000828 <SysTick_Config>
 80008c8:	4603      	mov	r3, r0
}
 80008ca:	4618      	mov	r0, r3
 80008cc:	3708      	adds	r7, #8
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
	...

080008d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008d4:	b480      	push	{r7}
 80008d6:	b08b      	sub	sp, #44	; 0x2c
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
 80008dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80008de:	2300      	movs	r3, #0
 80008e0:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00U;
 80008e2:	2300      	movs	r3, #0
 80008e4:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00U;
 80008e6:	2300      	movs	r3, #0
 80008e8:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00U;
 80008ea:	2300      	movs	r3, #0
 80008ec:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 80008ee:	2300      	movs	r3, #0
 80008f0:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 80008f2:	2300      	movs	r3, #0
 80008f4:	627b      	str	r3, [r7, #36]	; 0x24
 80008f6:	e127      	b.n	8000b48 <HAL_GPIO_Init+0x274>
  {
    /* Get the IO position */
    ioposition = (0x01U << position);
 80008f8:	2201      	movs	r2, #1
 80008fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000900:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000902:	683b      	ldr	r3, [r7, #0]
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	69fa      	ldr	r2, [r7, #28]
 8000908:	4013      	ands	r3, r2
 800090a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800090c:	69ba      	ldr	r2, [r7, #24]
 800090e:	69fb      	ldr	r3, [r7, #28]
 8000910:	429a      	cmp	r2, r3
 8000912:	f040 8116 	bne.w	8000b42 <HAL_GPIO_Init+0x26e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000916:	683b      	ldr	r3, [r7, #0]
 8000918:	685b      	ldr	r3, [r3, #4]
 800091a:	2b12      	cmp	r3, #18
 800091c:	d034      	beq.n	8000988 <HAL_GPIO_Init+0xb4>
 800091e:	2b12      	cmp	r3, #18
 8000920:	d80d      	bhi.n	800093e <HAL_GPIO_Init+0x6a>
 8000922:	2b02      	cmp	r3, #2
 8000924:	d02b      	beq.n	800097e <HAL_GPIO_Init+0xaa>
 8000926:	2b02      	cmp	r3, #2
 8000928:	d804      	bhi.n	8000934 <HAL_GPIO_Init+0x60>
 800092a:	2b00      	cmp	r3, #0
 800092c:	d031      	beq.n	8000992 <HAL_GPIO_Init+0xbe>
 800092e:	2b01      	cmp	r3, #1
 8000930:	d01c      	beq.n	800096c <HAL_GPIO_Init+0x98>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000932:	e048      	b.n	80009c6 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8000934:	2b03      	cmp	r3, #3
 8000936:	d043      	beq.n	80009c0 <HAL_GPIO_Init+0xec>
 8000938:	2b11      	cmp	r3, #17
 800093a:	d01b      	beq.n	8000974 <HAL_GPIO_Init+0xa0>
          break;
 800093c:	e043      	b.n	80009c6 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 800093e:	4a87      	ldr	r2, [pc, #540]	; (8000b5c <HAL_GPIO_Init+0x288>)
 8000940:	4293      	cmp	r3, r2
 8000942:	d026      	beq.n	8000992 <HAL_GPIO_Init+0xbe>
 8000944:	4a85      	ldr	r2, [pc, #532]	; (8000b5c <HAL_GPIO_Init+0x288>)
 8000946:	4293      	cmp	r3, r2
 8000948:	d806      	bhi.n	8000958 <HAL_GPIO_Init+0x84>
 800094a:	4a85      	ldr	r2, [pc, #532]	; (8000b60 <HAL_GPIO_Init+0x28c>)
 800094c:	4293      	cmp	r3, r2
 800094e:	d020      	beq.n	8000992 <HAL_GPIO_Init+0xbe>
 8000950:	4a84      	ldr	r2, [pc, #528]	; (8000b64 <HAL_GPIO_Init+0x290>)
 8000952:	4293      	cmp	r3, r2
 8000954:	d01d      	beq.n	8000992 <HAL_GPIO_Init+0xbe>
          break;
 8000956:	e036      	b.n	80009c6 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8000958:	4a83      	ldr	r2, [pc, #524]	; (8000b68 <HAL_GPIO_Init+0x294>)
 800095a:	4293      	cmp	r3, r2
 800095c:	d019      	beq.n	8000992 <HAL_GPIO_Init+0xbe>
 800095e:	4a83      	ldr	r2, [pc, #524]	; (8000b6c <HAL_GPIO_Init+0x298>)
 8000960:	4293      	cmp	r3, r2
 8000962:	d016      	beq.n	8000992 <HAL_GPIO_Init+0xbe>
 8000964:	4a82      	ldr	r2, [pc, #520]	; (8000b70 <HAL_GPIO_Init+0x29c>)
 8000966:	4293      	cmp	r3, r2
 8000968:	d013      	beq.n	8000992 <HAL_GPIO_Init+0xbe>
          break;
 800096a:	e02c      	b.n	80009c6 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800096c:	683b      	ldr	r3, [r7, #0]
 800096e:	68db      	ldr	r3, [r3, #12]
 8000970:	623b      	str	r3, [r7, #32]
          break;
 8000972:	e028      	b.n	80009c6 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000974:	683b      	ldr	r3, [r7, #0]
 8000976:	68db      	ldr	r3, [r3, #12]
 8000978:	3304      	adds	r3, #4
 800097a:	623b      	str	r3, [r7, #32]
          break;
 800097c:	e023      	b.n	80009c6 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800097e:	683b      	ldr	r3, [r7, #0]
 8000980:	68db      	ldr	r3, [r3, #12]
 8000982:	3308      	adds	r3, #8
 8000984:	623b      	str	r3, [r7, #32]
          break;
 8000986:	e01e      	b.n	80009c6 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000988:	683b      	ldr	r3, [r7, #0]
 800098a:	68db      	ldr	r3, [r3, #12]
 800098c:	330c      	adds	r3, #12
 800098e:	623b      	str	r3, [r7, #32]
          break;
 8000990:	e019      	b.n	80009c6 <HAL_GPIO_Init+0xf2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000992:	683b      	ldr	r3, [r7, #0]
 8000994:	689b      	ldr	r3, [r3, #8]
 8000996:	2b00      	cmp	r3, #0
 8000998:	d102      	bne.n	80009a0 <HAL_GPIO_Init+0xcc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800099a:	2304      	movs	r3, #4
 800099c:	623b      	str	r3, [r7, #32]
          break;
 800099e:	e012      	b.n	80009c6 <HAL_GPIO_Init+0xf2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	689b      	ldr	r3, [r3, #8]
 80009a4:	2b01      	cmp	r3, #1
 80009a6:	d105      	bne.n	80009b4 <HAL_GPIO_Init+0xe0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80009a8:	2308      	movs	r3, #8
 80009aa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	69fa      	ldr	r2, [r7, #28]
 80009b0:	611a      	str	r2, [r3, #16]
          break;
 80009b2:	e008      	b.n	80009c6 <HAL_GPIO_Init+0xf2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80009b4:	2308      	movs	r3, #8
 80009b6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	69fa      	ldr	r2, [r7, #28]
 80009bc:	615a      	str	r2, [r3, #20]
          break;
 80009be:	e002      	b.n	80009c6 <HAL_GPIO_Init+0xf2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80009c0:	2300      	movs	r3, #0
 80009c2:	623b      	str	r3, [r7, #32]
          break;
 80009c4:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80009c6:	69bb      	ldr	r3, [r7, #24]
 80009c8:	2bff      	cmp	r3, #255	; 0xff
 80009ca:	d801      	bhi.n	80009d0 <HAL_GPIO_Init+0xfc>
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	e001      	b.n	80009d4 <HAL_GPIO_Init+0x100>
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	3304      	adds	r3, #4
 80009d4:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 80009d6:	69bb      	ldr	r3, [r7, #24]
 80009d8:	2bff      	cmp	r3, #255	; 0xff
 80009da:	d802      	bhi.n	80009e2 <HAL_GPIO_Init+0x10e>
 80009dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009de:	009b      	lsls	r3, r3, #2
 80009e0:	e002      	b.n	80009e8 <HAL_GPIO_Init+0x114>
 80009e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009e4:	3b08      	subs	r3, #8
 80009e6:	009b      	lsls	r3, r3, #2
 80009e8:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80009ea:	68fb      	ldr	r3, [r7, #12]
 80009ec:	681a      	ldr	r2, [r3, #0]
 80009ee:	210f      	movs	r1, #15
 80009f0:	693b      	ldr	r3, [r7, #16]
 80009f2:	fa01 f303 	lsl.w	r3, r1, r3
 80009f6:	43db      	mvns	r3, r3
 80009f8:	401a      	ands	r2, r3
 80009fa:	6a39      	ldr	r1, [r7, #32]
 80009fc:	693b      	ldr	r3, [r7, #16]
 80009fe:	fa01 f303 	lsl.w	r3, r1, r3
 8000a02:	431a      	orrs	r2, r3
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	685b      	ldr	r3, [r3, #4]
 8000a0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	f000 8096 	beq.w	8000b42 <HAL_GPIO_Init+0x26e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000a16:	4b57      	ldr	r3, [pc, #348]	; (8000b74 <HAL_GPIO_Init+0x2a0>)
 8000a18:	699b      	ldr	r3, [r3, #24]
 8000a1a:	4a56      	ldr	r2, [pc, #344]	; (8000b74 <HAL_GPIO_Init+0x2a0>)
 8000a1c:	f043 0301 	orr.w	r3, r3, #1
 8000a20:	6193      	str	r3, [r2, #24]
 8000a22:	4b54      	ldr	r3, [pc, #336]	; (8000b74 <HAL_GPIO_Init+0x2a0>)
 8000a24:	699b      	ldr	r3, [r3, #24]
 8000a26:	f003 0301 	and.w	r3, r3, #1
 8000a2a:	60bb      	str	r3, [r7, #8]
 8000a2c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2U];
 8000a2e:	4a52      	ldr	r2, [pc, #328]	; (8000b78 <HAL_GPIO_Init+0x2a4>)
 8000a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a32:	089b      	lsrs	r3, r3, #2
 8000a34:	3302      	adds	r3, #2
 8000a36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a3a:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a3e:	f003 0303 	and.w	r3, r3, #3
 8000a42:	009b      	lsls	r3, r3, #2
 8000a44:	220f      	movs	r2, #15
 8000a46:	fa02 f303 	lsl.w	r3, r2, r3
 8000a4a:	43db      	mvns	r3, r3
 8000a4c:	697a      	ldr	r2, [r7, #20]
 8000a4e:	4013      	ands	r3, r2
 8000a50:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	4a49      	ldr	r2, [pc, #292]	; (8000b7c <HAL_GPIO_Init+0x2a8>)
 8000a56:	4293      	cmp	r3, r2
 8000a58:	d013      	beq.n	8000a82 <HAL_GPIO_Init+0x1ae>
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	4a48      	ldr	r2, [pc, #288]	; (8000b80 <HAL_GPIO_Init+0x2ac>)
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d00d      	beq.n	8000a7e <HAL_GPIO_Init+0x1aa>
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	4a47      	ldr	r2, [pc, #284]	; (8000b84 <HAL_GPIO_Init+0x2b0>)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d007      	beq.n	8000a7a <HAL_GPIO_Init+0x1a6>
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	4a46      	ldr	r2, [pc, #280]	; (8000b88 <HAL_GPIO_Init+0x2b4>)
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d101      	bne.n	8000a76 <HAL_GPIO_Init+0x1a2>
 8000a72:	2303      	movs	r3, #3
 8000a74:	e006      	b.n	8000a84 <HAL_GPIO_Init+0x1b0>
 8000a76:	2304      	movs	r3, #4
 8000a78:	e004      	b.n	8000a84 <HAL_GPIO_Init+0x1b0>
 8000a7a:	2302      	movs	r3, #2
 8000a7c:	e002      	b.n	8000a84 <HAL_GPIO_Init+0x1b0>
 8000a7e:	2301      	movs	r3, #1
 8000a80:	e000      	b.n	8000a84 <HAL_GPIO_Init+0x1b0>
 8000a82:	2300      	movs	r3, #0
 8000a84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a86:	f002 0203 	and.w	r2, r2, #3
 8000a8a:	0092      	lsls	r2, r2, #2
 8000a8c:	4093      	lsls	r3, r2
 8000a8e:	697a      	ldr	r2, [r7, #20]
 8000a90:	4313      	orrs	r3, r2
 8000a92:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2U] = temp;
 8000a94:	4938      	ldr	r1, [pc, #224]	; (8000b78 <HAL_GPIO_Init+0x2a4>)
 8000a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a98:	089b      	lsrs	r3, r3, #2
 8000a9a:	3302      	adds	r3, #2
 8000a9c:	697a      	ldr	r2, [r7, #20]
 8000a9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000aa2:	683b      	ldr	r3, [r7, #0]
 8000aa4:	685b      	ldr	r3, [r3, #4]
 8000aa6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d006      	beq.n	8000abc <HAL_GPIO_Init+0x1e8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000aae:	4b37      	ldr	r3, [pc, #220]	; (8000b8c <HAL_GPIO_Init+0x2b8>)
 8000ab0:	681a      	ldr	r2, [r3, #0]
 8000ab2:	4936      	ldr	r1, [pc, #216]	; (8000b8c <HAL_GPIO_Init+0x2b8>)
 8000ab4:	69bb      	ldr	r3, [r7, #24]
 8000ab6:	4313      	orrs	r3, r2
 8000ab8:	600b      	str	r3, [r1, #0]
 8000aba:	e006      	b.n	8000aca <HAL_GPIO_Init+0x1f6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000abc:	4b33      	ldr	r3, [pc, #204]	; (8000b8c <HAL_GPIO_Init+0x2b8>)
 8000abe:	681a      	ldr	r2, [r3, #0]
 8000ac0:	69bb      	ldr	r3, [r7, #24]
 8000ac2:	43db      	mvns	r3, r3
 8000ac4:	4931      	ldr	r1, [pc, #196]	; (8000b8c <HAL_GPIO_Init+0x2b8>)
 8000ac6:	4013      	ands	r3, r2
 8000ac8:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000aca:	683b      	ldr	r3, [r7, #0]
 8000acc:	685b      	ldr	r3, [r3, #4]
 8000ace:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d006      	beq.n	8000ae4 <HAL_GPIO_Init+0x210>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000ad6:	4b2d      	ldr	r3, [pc, #180]	; (8000b8c <HAL_GPIO_Init+0x2b8>)
 8000ad8:	685a      	ldr	r2, [r3, #4]
 8000ada:	492c      	ldr	r1, [pc, #176]	; (8000b8c <HAL_GPIO_Init+0x2b8>)
 8000adc:	69bb      	ldr	r3, [r7, #24]
 8000ade:	4313      	orrs	r3, r2
 8000ae0:	604b      	str	r3, [r1, #4]
 8000ae2:	e006      	b.n	8000af2 <HAL_GPIO_Init+0x21e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000ae4:	4b29      	ldr	r3, [pc, #164]	; (8000b8c <HAL_GPIO_Init+0x2b8>)
 8000ae6:	685a      	ldr	r2, [r3, #4]
 8000ae8:	69bb      	ldr	r3, [r7, #24]
 8000aea:	43db      	mvns	r3, r3
 8000aec:	4927      	ldr	r1, [pc, #156]	; (8000b8c <HAL_GPIO_Init+0x2b8>)
 8000aee:	4013      	ands	r3, r2
 8000af0:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	685b      	ldr	r3, [r3, #4]
 8000af6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d006      	beq.n	8000b0c <HAL_GPIO_Init+0x238>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000afe:	4b23      	ldr	r3, [pc, #140]	; (8000b8c <HAL_GPIO_Init+0x2b8>)
 8000b00:	689a      	ldr	r2, [r3, #8]
 8000b02:	4922      	ldr	r1, [pc, #136]	; (8000b8c <HAL_GPIO_Init+0x2b8>)
 8000b04:	69bb      	ldr	r3, [r7, #24]
 8000b06:	4313      	orrs	r3, r2
 8000b08:	608b      	str	r3, [r1, #8]
 8000b0a:	e006      	b.n	8000b1a <HAL_GPIO_Init+0x246>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000b0c:	4b1f      	ldr	r3, [pc, #124]	; (8000b8c <HAL_GPIO_Init+0x2b8>)
 8000b0e:	689a      	ldr	r2, [r3, #8]
 8000b10:	69bb      	ldr	r3, [r7, #24]
 8000b12:	43db      	mvns	r3, r3
 8000b14:	491d      	ldr	r1, [pc, #116]	; (8000b8c <HAL_GPIO_Init+0x2b8>)
 8000b16:	4013      	ands	r3, r2
 8000b18:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	685b      	ldr	r3, [r3, #4]
 8000b1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d006      	beq.n	8000b34 <HAL_GPIO_Init+0x260>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000b26:	4b19      	ldr	r3, [pc, #100]	; (8000b8c <HAL_GPIO_Init+0x2b8>)
 8000b28:	68da      	ldr	r2, [r3, #12]
 8000b2a:	4918      	ldr	r1, [pc, #96]	; (8000b8c <HAL_GPIO_Init+0x2b8>)
 8000b2c:	69bb      	ldr	r3, [r7, #24]
 8000b2e:	4313      	orrs	r3, r2
 8000b30:	60cb      	str	r3, [r1, #12]
 8000b32:	e006      	b.n	8000b42 <HAL_GPIO_Init+0x26e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000b34:	4b15      	ldr	r3, [pc, #84]	; (8000b8c <HAL_GPIO_Init+0x2b8>)
 8000b36:	68da      	ldr	r2, [r3, #12]
 8000b38:	69bb      	ldr	r3, [r7, #24]
 8000b3a:	43db      	mvns	r3, r3
 8000b3c:	4913      	ldr	r1, [pc, #76]	; (8000b8c <HAL_GPIO_Init+0x2b8>)
 8000b3e:	4013      	ands	r3, r2
 8000b40:	60cb      	str	r3, [r1, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b44:	3301      	adds	r3, #1
 8000b46:	627b      	str	r3, [r7, #36]	; 0x24
 8000b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b4a:	2b0f      	cmp	r3, #15
 8000b4c:	f67f aed4 	bls.w	80008f8 <HAL_GPIO_Init+0x24>
        }
      }
    }
  }
}
 8000b50:	bf00      	nop
 8000b52:	372c      	adds	r7, #44	; 0x2c
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bc80      	pop	{r7}
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop
 8000b5c:	10210000 	.word	0x10210000
 8000b60:	10110000 	.word	0x10110000
 8000b64:	10120000 	.word	0x10120000
 8000b68:	10310000 	.word	0x10310000
 8000b6c:	10320000 	.word	0x10320000
 8000b70:	10220000 	.word	0x10220000
 8000b74:	40021000 	.word	0x40021000
 8000b78:	40010000 	.word	0x40010000
 8000b7c:	40010800 	.word	0x40010800
 8000b80:	40010c00 	.word	0x40010c00
 8000b84:	40011000 	.word	0x40011000
 8000b88:	40011400 	.word	0x40011400
 8000b8c:	40010400 	.word	0x40010400

08000b90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b083      	sub	sp, #12
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
 8000b98:	460b      	mov	r3, r1
 8000b9a:	807b      	strh	r3, [r7, #2]
 8000b9c:	4613      	mov	r3, r2
 8000b9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ba0:	787b      	ldrb	r3, [r7, #1]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d003      	beq.n	8000bae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ba6:	887a      	ldrh	r2, [r7, #2]
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000bac:	e003      	b.n	8000bb6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000bae:	887b      	ldrh	r3, [r7, #2]
 8000bb0:	041a      	lsls	r2, r3, #16
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	611a      	str	r2, [r3, #16]
}
 8000bb6:	bf00      	nop
 8000bb8:	370c      	adds	r7, #12
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bc80      	pop	{r7}
 8000bbe:	4770      	bx	lr

08000bc0 <HAL_I2C_Init>:
  * @param  hi2c: pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b084      	sub	sp, #16
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange = 0U;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	60fb      	str	r3, [r7, #12]
  uint32_t pclk1 = 0U;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	60bb      	str	r3, [r7, #8]

  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d101      	bne.n	8000bda <HAL_I2C_Init+0x1a>
  {
    return HAL_ERROR;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	e0e7      	b.n	8000daa <HAL_I2C_Init+0x1ea>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000be0:	b2db      	uxtb	r3, r3
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d106      	bne.n	8000bf4 <HAL_I2C_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	2200      	movs	r2, #0
 8000bea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000bee:	6878      	ldr	r0, [r7, #4]
 8000bf0:	f001 fd1e 	bl	8002630 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	2224      	movs	r2, #36	; 0x24
 8000bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	681a      	ldr	r2, [r3, #0]
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	f022 0201 	bic.w	r2, r2, #1
 8000c0a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000c0c:	f001 fb24 	bl	8002258 <HAL_RCC_GetPCLK1Freq>
 8000c10:	60b8      	str	r0, [r7, #8]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	685b      	ldr	r3, [r3, #4]
 8000c16:	4a67      	ldr	r2, [pc, #412]	; (8000db4 <HAL_I2C_Init+0x1f4>)
 8000c18:	4293      	cmp	r3, r2
 8000c1a:	d807      	bhi.n	8000c2c <HAL_I2C_Init+0x6c>
 8000c1c:	68bb      	ldr	r3, [r7, #8]
 8000c1e:	4a66      	ldr	r2, [pc, #408]	; (8000db8 <HAL_I2C_Init+0x1f8>)
 8000c20:	4293      	cmp	r3, r2
 8000c22:	bf94      	ite	ls
 8000c24:	2301      	movls	r3, #1
 8000c26:	2300      	movhi	r3, #0
 8000c28:	b2db      	uxtb	r3, r3
 8000c2a:	e006      	b.n	8000c3a <HAL_I2C_Init+0x7a>
 8000c2c:	68bb      	ldr	r3, [r7, #8]
 8000c2e:	4a63      	ldr	r2, [pc, #396]	; (8000dbc <HAL_I2C_Init+0x1fc>)
 8000c30:	4293      	cmp	r3, r2
 8000c32:	bf94      	ite	ls
 8000c34:	2301      	movls	r3, #1
 8000c36:	2300      	movhi	r3, #0
 8000c38:	b2db      	uxtb	r3, r3
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <HAL_I2C_Init+0x82>
  {
    return HAL_ERROR;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	e0b3      	b.n	8000daa <HAL_I2C_Init+0x1ea>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000c42:	68bb      	ldr	r3, [r7, #8]
 8000c44:	4a5e      	ldr	r2, [pc, #376]	; (8000dc0 <HAL_I2C_Init+0x200>)
 8000c46:	fba2 2303 	umull	r2, r3, r2, r3
 8000c4a:	0c9b      	lsrs	r3, r3, #18
 8000c4c:	60fb      	str	r3, [r7, #12]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	68fa      	ldr	r2, [r7, #12]
 8000c54:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	685b      	ldr	r3, [r3, #4]
 8000c5a:	4a56      	ldr	r2, [pc, #344]	; (8000db4 <HAL_I2C_Init+0x1f4>)
 8000c5c:	4293      	cmp	r3, r2
 8000c5e:	d802      	bhi.n	8000c66 <HAL_I2C_Init+0xa6>
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	3301      	adds	r3, #1
 8000c64:	e009      	b.n	8000c7a <HAL_I2C_Init+0xba>
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000c6c:	fb02 f303 	mul.w	r3, r2, r3
 8000c70:	4a54      	ldr	r2, [pc, #336]	; (8000dc4 <HAL_I2C_Init+0x204>)
 8000c72:	fba2 2303 	umull	r2, r3, r2, r3
 8000c76:	099b      	lsrs	r3, r3, #6
 8000c78:	3301      	adds	r3, #1
 8000c7a:	687a      	ldr	r2, [r7, #4]
 8000c7c:	6812      	ldr	r2, [r2, #0]
 8000c7e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	4a4b      	ldr	r2, [pc, #300]	; (8000db4 <HAL_I2C_Init+0x1f4>)
 8000c86:	4293      	cmp	r3, r2
 8000c88:	d80d      	bhi.n	8000ca6 <HAL_I2C_Init+0xe6>
 8000c8a:	68bb      	ldr	r3, [r7, #8]
 8000c8c:	1e5a      	subs	r2, r3, #1
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	685b      	ldr	r3, [r3, #4]
 8000c92:	005b      	lsls	r3, r3, #1
 8000c94:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c98:	3301      	adds	r3, #1
 8000c9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000c9e:	2b04      	cmp	r3, #4
 8000ca0:	bf38      	it	cc
 8000ca2:	2304      	movcc	r3, #4
 8000ca4:	e04f      	b.n	8000d46 <HAL_I2C_Init+0x186>
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	689b      	ldr	r3, [r3, #8]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d111      	bne.n	8000cd2 <HAL_I2C_Init+0x112>
 8000cae:	68bb      	ldr	r3, [r7, #8]
 8000cb0:	1e59      	subs	r1, r3, #1
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	685a      	ldr	r2, [r3, #4]
 8000cb6:	4613      	mov	r3, r2
 8000cb8:	005b      	lsls	r3, r3, #1
 8000cba:	4413      	add	r3, r2
 8000cbc:	fbb1 f3f3 	udiv	r3, r1, r3
 8000cc0:	3301      	adds	r3, #1
 8000cc2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	bf0c      	ite	eq
 8000cca:	2301      	moveq	r3, #1
 8000ccc:	2300      	movne	r3, #0
 8000cce:	b2db      	uxtb	r3, r3
 8000cd0:	e012      	b.n	8000cf8 <HAL_I2C_Init+0x138>
 8000cd2:	68bb      	ldr	r3, [r7, #8]
 8000cd4:	1e59      	subs	r1, r3, #1
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	685a      	ldr	r2, [r3, #4]
 8000cda:	4613      	mov	r3, r2
 8000cdc:	009b      	lsls	r3, r3, #2
 8000cde:	4413      	add	r3, r2
 8000ce0:	009a      	lsls	r2, r3, #2
 8000ce2:	4413      	add	r3, r2
 8000ce4:	fbb1 f3f3 	udiv	r3, r1, r3
 8000ce8:	3301      	adds	r3, #1
 8000cea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	bf0c      	ite	eq
 8000cf2:	2301      	moveq	r3, #1
 8000cf4:	2300      	movne	r3, #0
 8000cf6:	b2db      	uxtb	r3, r3
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <HAL_I2C_Init+0x140>
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	e022      	b.n	8000d46 <HAL_I2C_Init+0x186>
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	689b      	ldr	r3, [r3, #8]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d10e      	bne.n	8000d26 <HAL_I2C_Init+0x166>
 8000d08:	68bb      	ldr	r3, [r7, #8]
 8000d0a:	1e59      	subs	r1, r3, #1
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	685a      	ldr	r2, [r3, #4]
 8000d10:	4613      	mov	r3, r2
 8000d12:	005b      	lsls	r3, r3, #1
 8000d14:	4413      	add	r3, r2
 8000d16:	fbb1 f3f3 	udiv	r3, r1, r3
 8000d1a:	3301      	adds	r3, #1
 8000d1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d24:	e00f      	b.n	8000d46 <HAL_I2C_Init+0x186>
 8000d26:	68bb      	ldr	r3, [r7, #8]
 8000d28:	1e59      	subs	r1, r3, #1
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	685a      	ldr	r2, [r3, #4]
 8000d2e:	4613      	mov	r3, r2
 8000d30:	009b      	lsls	r3, r3, #2
 8000d32:	4413      	add	r3, r2
 8000d34:	009a      	lsls	r2, r3, #2
 8000d36:	4413      	add	r3, r2
 8000d38:	fbb1 f3f3 	udiv	r3, r1, r3
 8000d3c:	3301      	adds	r3, #1
 8000d3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d42:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000d46:	687a      	ldr	r2, [r7, #4]
 8000d48:	6812      	ldr	r2, [r2, #0]
 8000d4a:	61d3      	str	r3, [r2, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	69d9      	ldr	r1, [r3, #28]
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	6a1a      	ldr	r2, [r3, #32]
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	430a      	orrs	r2, r1
 8000d5a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	6919      	ldr	r1, [r3, #16]
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	68da      	ldr	r2, [r3, #12]
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	430a      	orrs	r2, r1
 8000d6a:	609a      	str	r2, [r3, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	6959      	ldr	r1, [r3, #20]
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	699a      	ldr	r2, [r3, #24]
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	430a      	orrs	r2, r1
 8000d7a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	681a      	ldr	r2, [r3, #0]
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	f042 0201 	orr.w	r2, r2, #1
 8000d8a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	2200      	movs	r2, #0
 8000d90:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	2220      	movs	r2, #32
 8000d96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	2200      	movs	r2, #0
 8000da4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8000da8:	2300      	movs	r3, #0
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	3710      	adds	r7, #16
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	000186a0 	.word	0x000186a0
 8000db8:	001e847f 	.word	0x001e847f
 8000dbc:	003d08ff 	.word	0x003d08ff
 8000dc0:	431bde83 	.word	0x431bde83
 8000dc4:	10624dd3 	.word	0x10624dd3

08000dc8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b088      	sub	sp, #32
 8000dcc:	af02      	add	r7, sp, #8
 8000dce:	60f8      	str	r0, [r7, #12]
 8000dd0:	4608      	mov	r0, r1
 8000dd2:	4611      	mov	r1, r2
 8000dd4:	461a      	mov	r2, r3
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	817b      	strh	r3, [r7, #10]
 8000dda:	460b      	mov	r3, r1
 8000ddc:	813b      	strh	r3, [r7, #8]
 8000dde:	4613      	mov	r3, r2
 8000de0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = 0x00U;
 8000de2:	2300      	movs	r3, #0
 8000de4:	617b      	str	r3, [r7, #20]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8000de6:	f7ff fc87 	bl	80006f8 <HAL_GetTick>
 8000dea:	6178      	str	r0, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if(hi2c->State == HAL_I2C_STATE_READY)
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000df2:	b2db      	uxtb	r3, r3
 8000df4:	2b20      	cmp	r3, #32
 8000df6:	f040 80e7 	bne.w	8000fc8 <HAL_I2C_Mem_Write+0x200>
  {
    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000dfa:	697b      	ldr	r3, [r7, #20]
 8000dfc:	9300      	str	r3, [sp, #0]
 8000dfe:	2319      	movs	r3, #25
 8000e00:	2201      	movs	r2, #1
 8000e02:	4974      	ldr	r1, [pc, #464]	; (8000fd4 <HAL_I2C_Mem_Write+0x20c>)
 8000e04:	68f8      	ldr	r0, [r7, #12]
 8000e06:	f000 fca1 	bl	800174c <I2C_WaitOnFlagUntilTimeout>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d001      	beq.n	8000e14 <HAL_I2C_Mem_Write+0x4c>
    {
      return HAL_BUSY;
 8000e10:	2302      	movs	r3, #2
 8000e12:	e0da      	b.n	8000fca <HAL_I2C_Mem_Write+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000e1a:	2b01      	cmp	r3, #1
 8000e1c:	d101      	bne.n	8000e22 <HAL_I2C_Mem_Write+0x5a>
 8000e1e:	2302      	movs	r3, #2
 8000e20:	e0d3      	b.n	8000fca <HAL_I2C_Mem_Write+0x202>
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	2201      	movs	r2, #1
 8000e26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	f003 0301 	and.w	r3, r3, #1
 8000e34:	2b01      	cmp	r3, #1
 8000e36:	d007      	beq.n	8000e48 <HAL_I2C_Mem_Write+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	681a      	ldr	r2, [r3, #0]
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	f042 0201 	orr.w	r2, r2, #1
 8000e46:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	681a      	ldr	r2, [r3, #0]
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000e56:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	2221      	movs	r2, #33	; 0x21
 8000e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	2240      	movs	r2, #64	; 0x40
 8000e64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	6a3a      	ldr	r2, [r7, #32]
 8000e72:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000e78:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	4a56      	ldr	r2, [pc, #344]	; (8000fd8 <HAL_I2C_Mem_Write+0x210>)
 8000e7e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000e84:	b29a      	uxth	r2, r3
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	851a      	strh	r2, [r3, #40]	; 0x28
    
    /* Send Slave Address and Memory Address */
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8000e8a:	88f8      	ldrh	r0, [r7, #6]
 8000e8c:	893a      	ldrh	r2, [r7, #8]
 8000e8e:	8979      	ldrh	r1, [r7, #10]
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	9301      	str	r3, [sp, #4]
 8000e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e96:	9300      	str	r3, [sp, #0]
 8000e98:	4603      	mov	r3, r0
 8000e9a:	68f8      	ldr	r0, [r7, #12]
 8000e9c:	f000 fae0 	bl	8001460 <I2C_RequestMemoryWrite>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d05e      	beq.n	8000f64 <HAL_I2C_Mem_Write+0x19c>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eaa:	2b04      	cmp	r3, #4
 8000eac:	d105      	bne.n	8000eba <HAL_I2C_Mem_Write+0xf2>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	e087      	b.n	8000fca <HAL_I2C_Mem_Write+0x202>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_TIMEOUT;
 8000ec2:	2303      	movs	r3, #3
 8000ec4:	e081      	b.n	8000fca <HAL_I2C_Mem_Write+0x202>
    }

    while(hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000ec6:	697a      	ldr	r2, [r7, #20]
 8000ec8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000eca:	68f8      	ldr	r0, [r7, #12]
 8000ecc:	f000 fcfd 	bl	80018ca <I2C_WaitOnTXEFlagUntilTimeout>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d00f      	beq.n	8000ef6 <HAL_I2C_Mem_Write+0x12e>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eda:	2b04      	cmp	r3, #4
 8000edc:	d109      	bne.n	8000ef2 <HAL_I2C_Mem_Write+0x12a>
        {
          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	681a      	ldr	r2, [r3, #0]
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000eec:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	e06b      	b.n	8000fca <HAL_I2C_Mem_Write+0x202>
        }
        else
        {
          return HAL_TIMEOUT;
 8000ef2:	2303      	movs	r3, #3
 8000ef4:	e069      	b.n	8000fca <HAL_I2C_Mem_Write+0x202>
        }
      }

      /* Write data to DR */
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000efa:	1c59      	adds	r1, r3, #1
 8000efc:	68fa      	ldr	r2, [r7, #12]
 8000efe:	6251      	str	r1, [r2, #36]	; 0x24
 8000f00:	781a      	ldrb	r2, [r3, #0]
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	611a      	str	r2, [r3, #16]
      hi2c->XferSize--;
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f0c:	3b01      	subs	r3, #1
 8000f0e:	b29a      	uxth	r2, r3
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f18:	b29b      	uxth	r3, r3
 8000f1a:	3b01      	subs	r3, #1
 8000f1c:	b29a      	uxth	r2, r3
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	855a      	strh	r2, [r3, #42]	; 0x2a

      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	695b      	ldr	r3, [r3, #20]
 8000f28:	f003 0304 	and.w	r3, r3, #4
 8000f2c:	2b04      	cmp	r3, #4
 8000f2e:	d119      	bne.n	8000f64 <HAL_I2C_Mem_Write+0x19c>
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d015      	beq.n	8000f64 <HAL_I2C_Mem_Write+0x19c>
      {
        /* Write data to DR */
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f3c:	1c59      	adds	r1, r3, #1
 8000f3e:	68fa      	ldr	r2, [r7, #12]
 8000f40:	6251      	str	r1, [r2, #36]	; 0x24
 8000f42:	781a      	ldrb	r2, [r3, #0]
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	611a      	str	r2, [r3, #16]
        hi2c->XferSize--;
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f4e:	3b01      	subs	r3, #1
 8000f50:	b29a      	uxth	r2, r3
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f5a:	b29b      	uxth	r3, r3
 8000f5c:	3b01      	subs	r3, #1
 8000f5e:	b29a      	uxth	r2, r3
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	855a      	strh	r2, [r3, #42]	; 0x2a
    while(hi2c->XferSize > 0U)
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d1ac      	bne.n	8000ec6 <HAL_I2C_Mem_Write+0xfe>
      }
    }
    
    /* Wait until BTF flag is set */
    if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000f6c:	697a      	ldr	r2, [r7, #20]
 8000f6e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000f70:	68f8      	ldr	r0, [r7, #12]
 8000f72:	f000 fce7 	bl	8001944 <I2C_WaitOnBTFFlagUntilTimeout>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d00f      	beq.n	8000f9c <HAL_I2C_Mem_Write+0x1d4>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f80:	2b04      	cmp	r3, #4
 8000f82:	d109      	bne.n	8000f98 <HAL_I2C_Mem_Write+0x1d0>
      {
        /* Generate Stop */
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	681a      	ldr	r2, [r3, #0]
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000f92:	601a      	str	r2, [r3, #0]
        return HAL_ERROR;
 8000f94:	2301      	movs	r3, #1
 8000f96:	e018      	b.n	8000fca <HAL_I2C_Mem_Write+0x202>
      }
      else
      {
        return HAL_TIMEOUT;
 8000f98:	2303      	movs	r3, #3
 8000f9a:	e016      	b.n	8000fca <HAL_I2C_Mem_Write+0x202>
      }
    }

    /* Generate Stop */
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	681a      	ldr	r2, [r3, #0]
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000faa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	2220      	movs	r2, #32
 8000fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	e000      	b.n	8000fca <HAL_I2C_Mem_Write+0x202>
  }
  else
  {
    return HAL_BUSY;
 8000fc8:	2302      	movs	r3, #2
  }
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	3718      	adds	r7, #24
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	00100002 	.word	0x00100002
 8000fd8:	ffff0000 	.word	0xffff0000

08000fdc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b08c      	sub	sp, #48	; 0x30
 8000fe0:	af02      	add	r7, sp, #8
 8000fe2:	60f8      	str	r0, [r7, #12]
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	4611      	mov	r1, r2
 8000fe8:	461a      	mov	r2, r3
 8000fea:	4603      	mov	r3, r0
 8000fec:	817b      	strh	r3, [r7, #10]
 8000fee:	460b      	mov	r3, r1
 8000ff0:	813b      	strh	r3, [r7, #8]
 8000ff2:	4613      	mov	r3, r2
 8000ff4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = 0x00U;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8000ffa:	f7ff fb7d 	bl	80006f8 <HAL_GetTick>
 8000ffe:	6278      	str	r0, [r7, #36]	; 0x24
  
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if(hi2c->State == HAL_I2C_STATE_READY)
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001006:	b2db      	uxtb	r3, r3
 8001008:	2b20      	cmp	r3, #32
 800100a:	f040 8222 	bne.w	8001452 <HAL_I2C_Mem_Read+0x476>
  {
    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800100e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001010:	9300      	str	r3, [sp, #0]
 8001012:	2319      	movs	r3, #25
 8001014:	2201      	movs	r2, #1
 8001016:	498a      	ldr	r1, [pc, #552]	; (8001240 <HAL_I2C_Mem_Read+0x264>)
 8001018:	68f8      	ldr	r0, [r7, #12]
 800101a:	f000 fb97 	bl	800174c <I2C_WaitOnFlagUntilTimeout>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8001024:	2302      	movs	r3, #2
 8001026:	e215      	b.n	8001454 <HAL_I2C_Mem_Read+0x478>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800102e:	2b01      	cmp	r3, #1
 8001030:	d101      	bne.n	8001036 <HAL_I2C_Mem_Read+0x5a>
 8001032:	2302      	movs	r3, #2
 8001034:	e20e      	b.n	8001454 <HAL_I2C_Mem_Read+0x478>
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	2201      	movs	r2, #1
 800103a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f003 0301 	and.w	r3, r3, #1
 8001048:	2b01      	cmp	r3, #1
 800104a:	d007      	beq.n	800105c <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	681a      	ldr	r2, [r3, #0]
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f042 0201 	orr.w	r2, r2, #1
 800105a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	681a      	ldr	r2, [r3, #0]
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800106a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	2222      	movs	r2, #34	; 0x22
 8001070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	2240      	movs	r2, #64	; 0x40
 8001078:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	2200      	movs	r2, #0
 8001080:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001086:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800108c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	4a6c      	ldr	r2, [pc, #432]	; (8001244 <HAL_I2C_Mem_Read+0x268>)
 8001092:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001098:	b29a      	uxth	r2, r3
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	851a      	strh	r2, [r3, #40]	; 0x28

    /* Send Slave Address and Memory Address */
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800109e:	88f8      	ldrh	r0, [r7, #6]
 80010a0:	893a      	ldrh	r2, [r7, #8]
 80010a2:	8979      	ldrh	r1, [r7, #10]
 80010a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010a6:	9301      	str	r3, [sp, #4]
 80010a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80010aa:	9300      	str	r3, [sp, #0]
 80010ac:	4603      	mov	r3, r0
 80010ae:	68f8      	ldr	r0, [r7, #12]
 80010b0:	f000 fa6a 	bl	8001588 <I2C_RequestMemoryRead>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d00f      	beq.n	80010da <HAL_I2C_Mem_Read+0xfe>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010be:	2b04      	cmp	r3, #4
 80010c0:	d105      	bne.n	80010ce <HAL_I2C_Mem_Read+0xf2>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	2200      	movs	r2, #0
 80010c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 80010ca:	2301      	movs	r3, #1
 80010cc:	e1c2      	b.n	8001454 <HAL_I2C_Mem_Read+0x478>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	2200      	movs	r2, #0
 80010d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_TIMEOUT;
 80010d6:	2303      	movs	r3, #3
 80010d8:	e1bc      	b.n	8001454 <HAL_I2C_Mem_Read+0x478>
      }
    }

    if(hi2c->XferSize == 0U)
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d113      	bne.n	800110a <HAL_I2C_Mem_Read+0x12e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80010e2:	2300      	movs	r3, #0
 80010e4:	623b      	str	r3, [r7, #32]
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	695b      	ldr	r3, [r3, #20]
 80010ec:	623b      	str	r3, [r7, #32]
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	699b      	ldr	r3, [r3, #24]
 80010f4:	623b      	str	r3, [r7, #32]
 80010f6:	6a3b      	ldr	r3, [r7, #32]
      
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001106:	601a      	str	r2, [r3, #0]
 8001108:	e190      	b.n	800142c <HAL_I2C_Mem_Read+0x450>
    }
    else if(hi2c->XferSize == 1U)
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800110e:	2b01      	cmp	r3, #1
 8001110:	d11d      	bne.n	800114e <HAL_I2C_Mem_Read+0x172>
    {
      /* Disable Acknowledge */
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001120:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001122:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001124:	2300      	movs	r3, #0
 8001126:	61fb      	str	r3, [r7, #28]
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	695b      	ldr	r3, [r3, #20]
 800112e:	61fb      	str	r3, [r7, #28]
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	699b      	ldr	r3, [r3, #24]
 8001136:	61fb      	str	r3, [r7, #28]
 8001138:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	681a      	ldr	r2, [r3, #0]
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001148:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800114a:	b662      	cpsie	i
 800114c:	e16e      	b.n	800142c <HAL_I2C_Mem_Read+0x450>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if(hi2c->XferSize == 2U)
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001152:	2b02      	cmp	r3, #2
 8001154:	d11d      	bne.n	8001192 <HAL_I2C_Mem_Read+0x1b6>
    {
      /* Enable Pos */
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	681a      	ldr	r2, [r3, #0]
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001164:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001166:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001168:	2300      	movs	r3, #0
 800116a:	61bb      	str	r3, [r7, #24]
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	695b      	ldr	r3, [r3, #20]
 8001172:	61bb      	str	r3, [r7, #24]
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	699b      	ldr	r3, [r3, #24]
 800117a:	61bb      	str	r3, [r7, #24]
 800117c:	69bb      	ldr	r3, [r7, #24]
      
      /* Disable Acknowledge */
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800118c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800118e:	b662      	cpsie	i
 8001190:	e14c      	b.n	800142c <HAL_I2C_Mem_Read+0x450>
       __enable_irq(); 
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	681a      	ldr	r2, [r3, #0]
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80011a0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80011a2:	2300      	movs	r3, #0
 80011a4:	617b      	str	r3, [r7, #20]
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	695b      	ldr	r3, [r3, #20]
 80011ac:	617b      	str	r3, [r7, #20]
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	699b      	ldr	r3, [r3, #24]
 80011b4:	617b      	str	r3, [r7, #20]
 80011b6:	697b      	ldr	r3, [r7, #20]
    }

    while(hi2c->XferSize > 0U)
 80011b8:	e138      	b.n	800142c <HAL_I2C_Mem_Read+0x450>
    {
      if(hi2c->XferSize <= 3U)
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011be:	2b03      	cmp	r3, #3
 80011c0:	f200 80ef 	bhi.w	80013a2 <HAL_I2C_Mem_Read+0x3c6>
      {
        /* One byte */
        if(hi2c->XferSize== 1U)
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011c8:	2b01      	cmp	r3, #1
 80011ca:	d127      	bne.n	800121c <HAL_I2C_Mem_Read+0x240>
        {
          /* Wait until RXNE flag is set */
          if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 80011cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011ce:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80011d0:	68f8      	ldr	r0, [r7, #12]
 80011d2:	f000 fbf4 	bl	80019be <I2C_WaitOnRXNEFlagUntilTimeout>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d007      	beq.n	80011ec <HAL_I2C_Mem_Read+0x210>
          {
            if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e0:	2b20      	cmp	r3, #32
 80011e2:	d101      	bne.n	80011e8 <HAL_I2C_Mem_Read+0x20c>
            {
              return HAL_TIMEOUT;
 80011e4:	2303      	movs	r3, #3
 80011e6:	e135      	b.n	8001454 <HAL_I2C_Mem_Read+0x478>
            }
            else
            {
              return HAL_ERROR;
 80011e8:	2301      	movs	r3, #1
 80011ea:	e133      	b.n	8001454 <HAL_I2C_Mem_Read+0x478>
            }
          }

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	6918      	ldr	r0, [r3, #16]
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011f6:	1c59      	adds	r1, r3, #1
 80011f8:	68fa      	ldr	r2, [r7, #12]
 80011fa:	6251      	str	r1, [r2, #36]	; 0x24
 80011fc:	b2c2      	uxtb	r2, r0
 80011fe:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001204:	3b01      	subs	r3, #1
 8001206:	b29a      	uxth	r2, r3
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001210:	b29b      	uxth	r3, r3
 8001212:	3b01      	subs	r3, #1
 8001214:	b29a      	uxth	r2, r3
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	855a      	strh	r2, [r3, #42]	; 0x2a
 800121a:	e107      	b.n	800142c <HAL_I2C_Mem_Read+0x450>
        }
        /* Two bytes */
        else if(hi2c->XferSize == 2U)
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001220:	2b02      	cmp	r3, #2
 8001222:	d14c      	bne.n	80012be <HAL_I2C_Mem_Read+0x2e2>
        {
          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001226:	9300      	str	r3, [sp, #0]
 8001228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800122a:	2200      	movs	r2, #0
 800122c:	4906      	ldr	r1, [pc, #24]	; (8001248 <HAL_I2C_Mem_Read+0x26c>)
 800122e:	68f8      	ldr	r0, [r7, #12]
 8001230:	f000 fa8c 	bl	800174c <I2C_WaitOnFlagUntilTimeout>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d008      	beq.n	800124c <HAL_I2C_Mem_Read+0x270>
          {
            return HAL_TIMEOUT;
 800123a:	2303      	movs	r3, #3
 800123c:	e10a      	b.n	8001454 <HAL_I2C_Mem_Read+0x478>
 800123e:	bf00      	nop
 8001240:	00100002 	.word	0x00100002
 8001244:	ffff0000 	.word	0xffff0000
 8001248:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800124c:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
           __disable_irq();

          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	681a      	ldr	r2, [r3, #0]
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800125c:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	6918      	ldr	r0, [r3, #16]
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001268:	1c59      	adds	r1, r3, #1
 800126a:	68fa      	ldr	r2, [r7, #12]
 800126c:	6251      	str	r1, [r2, #36]	; 0x24
 800126e:	b2c2      	uxtb	r2, r0
 8001270:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001276:	3b01      	subs	r3, #1
 8001278:	b29a      	uxth	r2, r3
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001282:	b29b      	uxth	r3, r3
 8001284:	3b01      	subs	r3, #1
 8001286:	b29a      	uxth	r2, r3
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800128c:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	6918      	ldr	r0, [r3, #16]
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001298:	1c59      	adds	r1, r3, #1
 800129a:	68fa      	ldr	r2, [r7, #12]
 800129c:	6251      	str	r1, [r2, #36]	; 0x24
 800129e:	b2c2      	uxtb	r2, r0
 80012a0:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012a6:	3b01      	subs	r3, #1
 80012a8:	b29a      	uxth	r2, r3
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012b2:	b29b      	uxth	r3, r3
 80012b4:	3b01      	subs	r3, #1
 80012b6:	b29a      	uxth	r2, r3
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	855a      	strh	r2, [r3, #42]	; 0x2a
 80012bc:	e0b6      	b.n	800142c <HAL_I2C_Mem_Read+0x450>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80012be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012c0:	9300      	str	r3, [sp, #0]
 80012c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80012c4:	2200      	movs	r2, #0
 80012c6:	4965      	ldr	r1, [pc, #404]	; (800145c <HAL_I2C_Mem_Read+0x480>)
 80012c8:	68f8      	ldr	r0, [r7, #12]
 80012ca:	f000 fa3f 	bl	800174c <I2C_WaitOnFlagUntilTimeout>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <HAL_I2C_Mem_Read+0x2fc>
          {
            return HAL_TIMEOUT;
 80012d4:	2303      	movs	r3, #3
 80012d6:	e0bd      	b.n	8001454 <HAL_I2C_Mem_Read+0x478>
          }

          /* Disable Acknowledge */
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	681a      	ldr	r2, [r3, #0]
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80012e6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80012e8:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	6918      	ldr	r0, [r3, #16]
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012f4:	1c59      	adds	r1, r3, #1
 80012f6:	68fa      	ldr	r2, [r7, #12]
 80012f8:	6251      	str	r1, [r2, #36]	; 0x24
 80012fa:	b2c2      	uxtb	r2, r0
 80012fc:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001302:	3b01      	subs	r3, #1
 8001304:	b29a      	uxth	r2, r3
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800130e:	b29b      	uxth	r3, r3
 8001310:	3b01      	subs	r3, #1
 8001312:	b29a      	uxth	r2, r3
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800131a:	9300      	str	r3, [sp, #0]
 800131c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800131e:	2200      	movs	r2, #0
 8001320:	494e      	ldr	r1, [pc, #312]	; (800145c <HAL_I2C_Mem_Read+0x480>)
 8001322:	68f8      	ldr	r0, [r7, #12]
 8001324:	f000 fa12 	bl	800174c <I2C_WaitOnFlagUntilTimeout>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <HAL_I2C_Mem_Read+0x356>
          {
            return HAL_TIMEOUT;
 800132e:	2303      	movs	r3, #3
 8001330:	e090      	b.n	8001454 <HAL_I2C_Mem_Read+0x478>
          }

          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	681a      	ldr	r2, [r3, #0]
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001340:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	6918      	ldr	r0, [r3, #16]
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800134c:	1c59      	adds	r1, r3, #1
 800134e:	68fa      	ldr	r2, [r7, #12]
 8001350:	6251      	str	r1, [r2, #36]	; 0x24
 8001352:	b2c2      	uxtb	r2, r0
 8001354:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800135a:	3b01      	subs	r3, #1
 800135c:	b29a      	uxth	r2, r3
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001366:	b29b      	uxth	r3, r3
 8001368:	3b01      	subs	r3, #1
 800136a:	b29a      	uxth	r2, r3
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001370:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	6918      	ldr	r0, [r3, #16]
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800137c:	1c59      	adds	r1, r3, #1
 800137e:	68fa      	ldr	r2, [r7, #12]
 8001380:	6251      	str	r1, [r2, #36]	; 0x24
 8001382:	b2c2      	uxtb	r2, r0
 8001384:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800138a:	3b01      	subs	r3, #1
 800138c:	b29a      	uxth	r2, r3
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001396:	b29b      	uxth	r3, r3
 8001398:	3b01      	subs	r3, #1
 800139a:	b29a      	uxth	r2, r3
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	855a      	strh	r2, [r3, #42]	; 0x2a
 80013a0:	e044      	b.n	800142c <HAL_I2C_Mem_Read+0x450>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80013a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013a4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80013a6:	68f8      	ldr	r0, [r7, #12]
 80013a8:	f000 fb09 	bl	80019be <I2C_WaitOnRXNEFlagUntilTimeout>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d007      	beq.n	80013c2 <HAL_I2C_Mem_Read+0x3e6>
        {
          if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b6:	2b20      	cmp	r3, #32
 80013b8:	d101      	bne.n	80013be <HAL_I2C_Mem_Read+0x3e2>
          {
            return HAL_TIMEOUT;
 80013ba:	2303      	movs	r3, #3
 80013bc:	e04a      	b.n	8001454 <HAL_I2C_Mem_Read+0x478>
          }
          else
          {
            return HAL_ERROR;
 80013be:	2301      	movs	r3, #1
 80013c0:	e048      	b.n	8001454 <HAL_I2C_Mem_Read+0x478>
          }
        }

        /* Read data from DR */
        (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	6918      	ldr	r0, [r3, #16]
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013cc:	1c59      	adds	r1, r3, #1
 80013ce:	68fa      	ldr	r2, [r7, #12]
 80013d0:	6251      	str	r1, [r2, #36]	; 0x24
 80013d2:	b2c2      	uxtb	r2, r0
 80013d4:	701a      	strb	r2, [r3, #0]
        hi2c->XferSize--;
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013da:	3b01      	subs	r3, #1
 80013dc:	b29a      	uxth	r2, r3
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013e6:	b29b      	uxth	r3, r3
 80013e8:	3b01      	subs	r3, #1
 80013ea:	b29a      	uxth	r2, r3
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	855a      	strh	r2, [r3, #42]	; 0x2a

        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	695b      	ldr	r3, [r3, #20]
 80013f6:	f003 0304 	and.w	r3, r3, #4
 80013fa:	2b04      	cmp	r3, #4
 80013fc:	d116      	bne.n	800142c <HAL_I2C_Mem_Read+0x450>
        {
          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	6918      	ldr	r0, [r3, #16]
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001408:	1c59      	adds	r1, r3, #1
 800140a:	68fa      	ldr	r2, [r7, #12]
 800140c:	6251      	str	r1, [r2, #36]	; 0x24
 800140e:	b2c2      	uxtb	r2, r0
 8001410:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001416:	3b01      	subs	r3, #1
 8001418:	b29a      	uxth	r2, r3
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001422:	b29b      	uxth	r3, r3
 8001424:	3b01      	subs	r3, #1
 8001426:	b29a      	uxth	r2, r3
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while(hi2c->XferSize > 0U)
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001430:	2b00      	cmp	r3, #0
 8001432:	f47f aec2 	bne.w	80011ba <HAL_I2C_Mem_Read+0x1de>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	2220      	movs	r2, #32
 800143a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	2200      	movs	r2, #0
 8001442:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	2200      	movs	r2, #0
 800144a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800144e:	2300      	movs	r3, #0
 8001450:	e000      	b.n	8001454 <HAL_I2C_Mem_Read+0x478>
  }
  else
  {
    return HAL_BUSY;
 8001452:	2302      	movs	r3, #2
  }
}
 8001454:	4618      	mov	r0, r3
 8001456:	3728      	adds	r7, #40	; 0x28
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	00010004 	.word	0x00010004

08001460 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b088      	sub	sp, #32
 8001464:	af02      	add	r7, sp, #8
 8001466:	60f8      	str	r0, [r7, #12]
 8001468:	4608      	mov	r0, r1
 800146a:	4611      	mov	r1, r2
 800146c:	461a      	mov	r2, r3
 800146e:	4603      	mov	r3, r0
 8001470:	817b      	strh	r3, [r7, #10]
 8001472:	460b      	mov	r3, r1
 8001474:	813b      	strh	r3, [r7, #8]
 8001476:	4613      	mov	r3, r2
 8001478:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  hi2c->Instance->CR1 |= I2C_CR1_START;
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	681a      	ldr	r2, [r3, #0]
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001488:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800148a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800148c:	9300      	str	r3, [sp, #0]
 800148e:	6a3b      	ldr	r3, [r7, #32]
 8001490:	2200      	movs	r2, #0
 8001492:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001496:	68f8      	ldr	r0, [r7, #12]
 8001498:	f000 f958 	bl	800174c <I2C_WaitOnFlagUntilTimeout>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <I2C_RequestMemoryWrite+0x46>
  {
    return HAL_TIMEOUT;
 80014a2:	2303      	movs	r3, #3
 80014a4:	e069      	b.n	800157a <I2C_RequestMemoryWrite+0x11a>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80014a6:	897b      	ldrh	r3, [r7, #10]
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	461a      	mov	r2, r3
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80014b4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80014b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b8:	6a3a      	ldr	r2, [r7, #32]
 80014ba:	4932      	ldr	r1, [pc, #200]	; (8001584 <I2C_RequestMemoryWrite+0x124>)
 80014bc:	68f8      	ldr	r0, [r7, #12]
 80014be:	f000 f996 	bl	80017ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d007      	beq.n	80014d8 <I2C_RequestMemoryWrite+0x78>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014cc:	2b04      	cmp	r3, #4
 80014ce:	d101      	bne.n	80014d4 <I2C_RequestMemoryWrite+0x74>
    {
      return HAL_ERROR;
 80014d0:	2301      	movs	r3, #1
 80014d2:	e052      	b.n	800157a <I2C_RequestMemoryWrite+0x11a>
    }
    else
    {
      return HAL_TIMEOUT;
 80014d4:	2303      	movs	r3, #3
 80014d6:	e050      	b.n	800157a <I2C_RequestMemoryWrite+0x11a>
    }
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80014d8:	2300      	movs	r3, #0
 80014da:	617b      	str	r3, [r7, #20]
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	695b      	ldr	r3, [r3, #20]
 80014e2:	617b      	str	r3, [r7, #20]
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	699b      	ldr	r3, [r3, #24]
 80014ea:	617b      	str	r3, [r7, #20]
 80014ec:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80014ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014f0:	6a39      	ldr	r1, [r7, #32]
 80014f2:	68f8      	ldr	r0, [r7, #12]
 80014f4:	f000 f9e9 	bl	80018ca <I2C_WaitOnTXEFlagUntilTimeout>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d00f      	beq.n	800151e <I2C_RequestMemoryWrite+0xbe>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001502:	2b04      	cmp	r3, #4
 8001504:	d109      	bne.n	800151a <I2C_RequestMemoryWrite+0xba>
    {
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	681a      	ldr	r2, [r3, #0]
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001514:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
 8001516:	2301      	movs	r3, #1
 8001518:	e02f      	b.n	800157a <I2C_RequestMemoryWrite+0x11a>
    }
    else
    {
      return HAL_TIMEOUT;
 800151a:	2303      	movs	r3, #3
 800151c:	e02d      	b.n	800157a <I2C_RequestMemoryWrite+0x11a>
    }
  }

  /* If Memory address size is 8Bit */
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800151e:	88fb      	ldrh	r3, [r7, #6]
 8001520:	2b01      	cmp	r3, #1
 8001522:	d105      	bne.n	8001530 <I2C_RequestMemoryWrite+0xd0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001524:	893b      	ldrh	r3, [r7, #8]
 8001526:	b2da      	uxtb	r2, r3
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	611a      	str	r2, [r3, #16]
 800152e:	e023      	b.n	8001578 <I2C_RequestMemoryWrite+0x118>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001530:	893b      	ldrh	r3, [r7, #8]
 8001532:	0a1b      	lsrs	r3, r3, #8
 8001534:	b29b      	uxth	r3, r3
 8001536:	b2da      	uxtb	r2, r3
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800153e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001540:	6a39      	ldr	r1, [r7, #32]
 8001542:	68f8      	ldr	r0, [r7, #12]
 8001544:	f000 f9c1 	bl	80018ca <I2C_WaitOnTXEFlagUntilTimeout>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d00f      	beq.n	800156e <I2C_RequestMemoryWrite+0x10e>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001552:	2b04      	cmp	r3, #4
 8001554:	d109      	bne.n	800156a <I2C_RequestMemoryWrite+0x10a>
      {
        /* Generate Stop */
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	681a      	ldr	r2, [r3, #0]
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001564:	601a      	str	r2, [r3, #0]
        return HAL_ERROR;
 8001566:	2301      	movs	r3, #1
 8001568:	e007      	b.n	800157a <I2C_RequestMemoryWrite+0x11a>
      }
      else
      {
        return HAL_TIMEOUT;
 800156a:	2303      	movs	r3, #3
 800156c:	e005      	b.n	800157a <I2C_RequestMemoryWrite+0x11a>
      }
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800156e:	893b      	ldrh	r3, [r7, #8]
 8001570:	b2da      	uxtb	r2, r3
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8001578:	2300      	movs	r3, #0
}
 800157a:	4618      	mov	r0, r3
 800157c:	3718      	adds	r7, #24
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	00010002 	.word	0x00010002

08001588 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b088      	sub	sp, #32
 800158c:	af02      	add	r7, sp, #8
 800158e:	60f8      	str	r0, [r7, #12]
 8001590:	4608      	mov	r0, r1
 8001592:	4611      	mov	r1, r2
 8001594:	461a      	mov	r2, r3
 8001596:	4603      	mov	r3, r0
 8001598:	817b      	strh	r3, [r7, #10]
 800159a:	460b      	mov	r3, r1
 800159c:	813b      	strh	r3, [r7, #8]
 800159e:	4613      	mov	r3, r2
 80015a0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80015b0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  hi2c->Instance->CR1 |= I2C_CR1_START;
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	681a      	ldr	r2, [r3, #0]
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80015c0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80015c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c4:	9300      	str	r3, [sp, #0]
 80015c6:	6a3b      	ldr	r3, [r7, #32]
 80015c8:	2200      	movs	r2, #0
 80015ca:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80015ce:	68f8      	ldr	r0, [r7, #12]
 80015d0:	f000 f8bc 	bl	800174c <I2C_WaitOnFlagUntilTimeout>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <I2C_RequestMemoryRead+0x56>
  {
    return HAL_TIMEOUT;
 80015da:	2303      	movs	r3, #3
 80015dc:	e0b0      	b.n	8001740 <I2C_RequestMemoryRead+0x1b8>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80015de:	897b      	ldrh	r3, [r7, #10]
 80015e0:	b2db      	uxtb	r3, r3
 80015e2:	461a      	mov	r2, r3
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80015ec:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80015ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f0:	6a3a      	ldr	r2, [r7, #32]
 80015f2:	4955      	ldr	r1, [pc, #340]	; (8001748 <I2C_RequestMemoryRead+0x1c0>)
 80015f4:	68f8      	ldr	r0, [r7, #12]
 80015f6:	f000 f8fa 	bl	80017ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d007      	beq.n	8001610 <I2C_RequestMemoryRead+0x88>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001604:	2b04      	cmp	r3, #4
 8001606:	d101      	bne.n	800160c <I2C_RequestMemoryRead+0x84>
    {
      return HAL_ERROR;
 8001608:	2301      	movs	r3, #1
 800160a:	e099      	b.n	8001740 <I2C_RequestMemoryRead+0x1b8>
    }
    else
    {
      return HAL_TIMEOUT;
 800160c:	2303      	movs	r3, #3
 800160e:	e097      	b.n	8001740 <I2C_RequestMemoryRead+0x1b8>
    }
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001610:	2300      	movs	r3, #0
 8001612:	617b      	str	r3, [r7, #20]
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	695b      	ldr	r3, [r3, #20]
 800161a:	617b      	str	r3, [r7, #20]
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	699b      	ldr	r3, [r3, #24]
 8001622:	617b      	str	r3, [r7, #20]
 8001624:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001626:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001628:	6a39      	ldr	r1, [r7, #32]
 800162a:	68f8      	ldr	r0, [r7, #12]
 800162c:	f000 f94d 	bl	80018ca <I2C_WaitOnTXEFlagUntilTimeout>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d00f      	beq.n	8001656 <I2C_RequestMemoryRead+0xce>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163a:	2b04      	cmp	r3, #4
 800163c:	d109      	bne.n	8001652 <I2C_RequestMemoryRead+0xca>
    {
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800164c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	e076      	b.n	8001740 <I2C_RequestMemoryRead+0x1b8>
    }
    else
    {
      return HAL_TIMEOUT;
 8001652:	2303      	movs	r3, #3
 8001654:	e074      	b.n	8001740 <I2C_RequestMemoryRead+0x1b8>
    }
  }

  /* If Memory address size is 8Bit */
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001656:	88fb      	ldrh	r3, [r7, #6]
 8001658:	2b01      	cmp	r3, #1
 800165a:	d105      	bne.n	8001668 <I2C_RequestMemoryRead+0xe0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800165c:	893b      	ldrh	r3, [r7, #8]
 800165e:	b2da      	uxtb	r2, r3
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	611a      	str	r2, [r3, #16]
 8001666:	e023      	b.n	80016b0 <I2C_RequestMemoryRead+0x128>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001668:	893b      	ldrh	r3, [r7, #8]
 800166a:	0a1b      	lsrs	r3, r3, #8
 800166c:	b29b      	uxth	r3, r3
 800166e:	b2da      	uxtb	r2, r3
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001676:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001678:	6a39      	ldr	r1, [r7, #32]
 800167a:	68f8      	ldr	r0, [r7, #12]
 800167c:	f000 f925 	bl	80018ca <I2C_WaitOnTXEFlagUntilTimeout>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d00f      	beq.n	80016a6 <I2C_RequestMemoryRead+0x11e>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168a:	2b04      	cmp	r3, #4
 800168c:	d109      	bne.n	80016a2 <I2C_RequestMemoryRead+0x11a>
      {
        /* Generate Stop */
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800169c:	601a      	str	r2, [r3, #0]
        return HAL_ERROR;
 800169e:	2301      	movs	r3, #1
 80016a0:	e04e      	b.n	8001740 <I2C_RequestMemoryRead+0x1b8>
      }
      else
      {
        return HAL_TIMEOUT;
 80016a2:	2303      	movs	r3, #3
 80016a4:	e04c      	b.n	8001740 <I2C_RequestMemoryRead+0x1b8>
      }
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80016a6:	893b      	ldrh	r3, [r7, #8]
 80016a8:	b2da      	uxtb	r2, r3
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80016b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016b2:	6a39      	ldr	r1, [r7, #32]
 80016b4:	68f8      	ldr	r0, [r7, #12]
 80016b6:	f000 f908 	bl	80018ca <I2C_WaitOnTXEFlagUntilTimeout>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d00f      	beq.n	80016e0 <I2C_RequestMemoryRead+0x158>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c4:	2b04      	cmp	r3, #4
 80016c6:	d109      	bne.n	80016dc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80016d6:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
 80016d8:	2301      	movs	r3, #1
 80016da:	e031      	b.n	8001740 <I2C_RequestMemoryRead+0x1b8>
    }
    else
    {
      return HAL_TIMEOUT;
 80016dc:	2303      	movs	r3, #3
 80016de:	e02f      	b.n	8001740 <I2C_RequestMemoryRead+0x1b8>
    }
  }

  /* Generate Restart */
  hi2c->Instance->CR1 |= I2C_CR1_START;
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80016ee:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80016f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f2:	9300      	str	r3, [sp, #0]
 80016f4:	6a3b      	ldr	r3, [r7, #32]
 80016f6:	2200      	movs	r2, #0
 80016f8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80016fc:	68f8      	ldr	r0, [r7, #12]
 80016fe:	f000 f825 	bl	800174c <I2C_WaitOnFlagUntilTimeout>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d001      	beq.n	800170c <I2C_RequestMemoryRead+0x184>
  {
    return HAL_TIMEOUT;
 8001708:	2303      	movs	r3, #3
 800170a:	e019      	b.n	8001740 <I2C_RequestMemoryRead+0x1b8>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800170c:	897b      	ldrh	r3, [r7, #10]
 800170e:	b2db      	uxtb	r3, r3
 8001710:	f043 0301 	orr.w	r3, r3, #1
 8001714:	b2da      	uxtb	r2, r3
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800171c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800171e:	6a3a      	ldr	r2, [r7, #32]
 8001720:	4909      	ldr	r1, [pc, #36]	; (8001748 <I2C_RequestMemoryRead+0x1c0>)
 8001722:	68f8      	ldr	r0, [r7, #12]
 8001724:	f000 f863 	bl	80017ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d007      	beq.n	800173e <I2C_RequestMemoryRead+0x1b6>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001732:	2b04      	cmp	r3, #4
 8001734:	d101      	bne.n	800173a <I2C_RequestMemoryRead+0x1b2>
    {
      return HAL_ERROR;
 8001736:	2301      	movs	r3, #1
 8001738:	e002      	b.n	8001740 <I2C_RequestMemoryRead+0x1b8>
    }
    else
    {
      return HAL_TIMEOUT;
 800173a:	2303      	movs	r3, #3
 800173c:	e000      	b.n	8001740 <I2C_RequestMemoryRead+0x1b8>
    }
  }

  return HAL_OK;
 800173e:	2300      	movs	r3, #0
}
 8001740:	4618      	mov	r0, r3
 8001742:	3718      	adds	r7, #24
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	00010002 	.word	0x00010002

0800174c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b084      	sub	sp, #16
 8001750:	af00      	add	r7, sp, #0
 8001752:	60f8      	str	r0, [r7, #12]
 8001754:	60b9      	str	r1, [r7, #8]
 8001756:	603b      	str	r3, [r7, #0]
 8001758:	4613      	mov	r3, r2
 800175a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 800175c:	e01f      	b.n	800179e <I2C_WaitOnFlagUntilTimeout+0x52>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001764:	d01b      	beq.n	800179e <I2C_WaitOnFlagUntilTimeout+0x52>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d007      	beq.n	800177c <I2C_WaitOnFlagUntilTimeout+0x30>
 800176c:	f7fe ffc4 	bl	80006f8 <HAL_GetTick>
 8001770:	4602      	mov	r2, r0
 8001772:	69bb      	ldr	r3, [r7, #24]
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	683a      	ldr	r2, [r7, #0]
 8001778:	429a      	cmp	r2, r3
 800177a:	d210      	bcs.n	800179e <I2C_WaitOnFlagUntilTimeout+0x52>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	2200      	movs	r2, #0
 8001780:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	2220      	movs	r2, #32
 8001786:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	2200      	movs	r2, #0
 800178e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	2200      	movs	r2, #0
 8001796:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 800179a:	2303      	movs	r3, #3
 800179c:	e023      	b.n	80017e6 <I2C_WaitOnFlagUntilTimeout+0x9a>
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 800179e:	68bb      	ldr	r3, [r7, #8]
 80017a0:	0c1b      	lsrs	r3, r3, #16
 80017a2:	b2db      	uxtb	r3, r3
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	d10d      	bne.n	80017c4 <I2C_WaitOnFlagUntilTimeout+0x78>
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	695b      	ldr	r3, [r3, #20]
 80017ae:	43da      	mvns	r2, r3
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	4013      	ands	r3, r2
 80017b4:	b29b      	uxth	r3, r3
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	bf0c      	ite	eq
 80017ba:	2301      	moveq	r3, #1
 80017bc:	2300      	movne	r3, #0
 80017be:	b2db      	uxtb	r3, r3
 80017c0:	461a      	mov	r2, r3
 80017c2:	e00c      	b.n	80017de <I2C_WaitOnFlagUntilTimeout+0x92>
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	699b      	ldr	r3, [r3, #24]
 80017ca:	43da      	mvns	r2, r3
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	4013      	ands	r3, r2
 80017d0:	b29b      	uxth	r3, r3
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	bf0c      	ite	eq
 80017d6:	2301      	moveq	r3, #1
 80017d8:	2300      	movne	r3, #0
 80017da:	b2db      	uxtb	r3, r3
 80017dc:	461a      	mov	r2, r3
 80017de:	79fb      	ldrb	r3, [r7, #7]
 80017e0:	429a      	cmp	r2, r3
 80017e2:	d0bc      	beq.n	800175e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 80017e4:	2300      	movs	r3, #0
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3710      	adds	r7, #16
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}

080017ee <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80017ee:	b580      	push	{r7, lr}
 80017f0:	b084      	sub	sp, #16
 80017f2:	af00      	add	r7, sp, #0
 80017f4:	60f8      	str	r0, [r7, #12]
 80017f6:	60b9      	str	r1, [r7, #8]
 80017f8:	607a      	str	r2, [r7, #4]
 80017fa:	603b      	str	r3, [r7, #0]
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80017fc:	e040      	b.n	8001880 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
  {
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	695b      	ldr	r3, [r3, #20]
 8001804:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001808:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800180c:	d11c      	bne.n	8001848 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5a>
    {
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800181c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001826:	615a      	str	r2, [r3, #20]

      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	2204      	movs	r2, #4
 800182c:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	2200      	movs	r2, #0
 8001832:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State= HAL_I2C_STATE_READY;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	2220      	movs	r2, #32
 8001838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	2200      	movs	r2, #0
 8001840:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001844:	2301      	movs	r3, #1
 8001846:	e03c      	b.n	80018c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd4>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800184e:	d017      	beq.n	8001880 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d007      	beq.n	8001866 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x78>
 8001856:	f7fe ff4f 	bl	80006f8 <HAL_GetTick>
 800185a:	4602      	mov	r2, r0
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	1ad3      	subs	r3, r2, r3
 8001860:	687a      	ldr	r2, [r7, #4]
 8001862:	429a      	cmp	r2, r3
 8001864:	d20c      	bcs.n	8001880 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	2200      	movs	r2, #0
 800186a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	2220      	movs	r2, #32
 8001870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	2200      	movs	r2, #0
 8001878:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800187c:	2303      	movs	r3, #3
 800187e:	e020      	b.n	80018c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd4>
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	0c1b      	lsrs	r3, r3, #16
 8001884:	b2db      	uxtb	r3, r3
 8001886:	2b01      	cmp	r3, #1
 8001888:	d10c      	bne.n	80018a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	695b      	ldr	r3, [r3, #20]
 8001890:	43da      	mvns	r2, r3
 8001892:	68bb      	ldr	r3, [r7, #8]
 8001894:	4013      	ands	r3, r2
 8001896:	b29b      	uxth	r3, r3
 8001898:	2b00      	cmp	r3, #0
 800189a:	bf14      	ite	ne
 800189c:	2301      	movne	r3, #1
 800189e:	2300      	moveq	r3, #0
 80018a0:	b2db      	uxtb	r3, r3
 80018a2:	e00b      	b.n	80018bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xce>
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	699b      	ldr	r3, [r3, #24]
 80018aa:	43da      	mvns	r2, r3
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	4013      	ands	r3, r2
 80018b0:	b29b      	uxth	r3, r3
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	bf14      	ite	ne
 80018b6:	2301      	movne	r3, #1
 80018b8:	2300      	moveq	r3, #0
 80018ba:	b2db      	uxtb	r3, r3
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d19e      	bne.n	80017fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80018c0:	2300      	movs	r3, #0
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3710      	adds	r7, #16
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}

080018ca <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{    
 80018ca:	b580      	push	{r7, lr}
 80018cc:	b084      	sub	sp, #16
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	60f8      	str	r0, [r7, #12]
 80018d2:	60b9      	str	r1, [r7, #8]
 80018d4:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80018d6:	e029      	b.n	800192c <I2C_WaitOnTXEFlagUntilTimeout+0x62>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80018d8:	68f8      	ldr	r0, [r7, #12]
 80018da:	f000 f8ba 	bl	8001a52 <I2C_IsAcknowledgeFailed>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d001      	beq.n	80018e8 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80018e4:	2301      	movs	r3, #1
 80018e6:	e029      	b.n	800193c <I2C_WaitOnTXEFlagUntilTimeout+0x72>
    }
		
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018ee:	d01d      	beq.n	800192c <I2C_WaitOnTXEFlagUntilTimeout+0x62>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d007      	beq.n	8001906 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80018f6:	f7fe feff 	bl	80006f8 <HAL_GetTick>
 80018fa:	4602      	mov	r2, r0
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	1ad3      	subs	r3, r2, r3
 8001900:	68ba      	ldr	r2, [r7, #8]
 8001902:	429a      	cmp	r2, r3
 8001904:	d212      	bcs.n	800192c <I2C_WaitOnTXEFlagUntilTimeout+0x62>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190a:	f043 0220 	orr.w	r2, r3, #32
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	2200      	movs	r2, #0
 8001916:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	2220      	movs	r2, #32
 800191c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	2200      	movs	r2, #0
 8001924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001928:	2303      	movs	r3, #3
 800192a:	e007      	b.n	800193c <I2C_WaitOnTXEFlagUntilTimeout+0x72>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	695b      	ldr	r3, [r3, #20]
 8001932:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001936:	2b80      	cmp	r3, #128	; 0x80
 8001938:	d1ce      	bne.n	80018d8 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;      
 800193a:	2300      	movs	r3, #0
}
 800193c:	4618      	mov	r0, r3
 800193e:	3710      	adds	r7, #16
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}

08001944 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{  
 8001944:	b580      	push	{r7, lr}
 8001946:	b084      	sub	sp, #16
 8001948:	af00      	add	r7, sp, #0
 800194a:	60f8      	str	r0, [r7, #12]
 800194c:	60b9      	str	r1, [r7, #8]
 800194e:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001950:	e029      	b.n	80019a6 <I2C_WaitOnBTFFlagUntilTimeout+0x62>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001952:	68f8      	ldr	r0, [r7, #12]
 8001954:	f000 f87d 	bl	8001a52 <I2C_IsAcknowledgeFailed>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d001      	beq.n	8001962 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	e029      	b.n	80019b6 <I2C_WaitOnBTFFlagUntilTimeout+0x72>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8001962:	68bb      	ldr	r3, [r7, #8]
 8001964:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001968:	d01d      	beq.n	80019a6 <I2C_WaitOnBTFFlagUntilTimeout+0x62>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800196a:	68bb      	ldr	r3, [r7, #8]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d007      	beq.n	8001980 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001970:	f7fe fec2 	bl	80006f8 <HAL_GetTick>
 8001974:	4602      	mov	r2, r0
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	68ba      	ldr	r2, [r7, #8]
 800197c:	429a      	cmp	r2, r3
 800197e:	d212      	bcs.n	80019a6 <I2C_WaitOnBTFFlagUntilTimeout+0x62>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001984:	f043 0220 	orr.w	r2, r3, #32
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	2200      	movs	r2, #0
 8001990:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	2220      	movs	r2, #32
 8001996:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	2200      	movs	r2, #0
 800199e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80019a2:	2303      	movs	r3, #3
 80019a4:	e007      	b.n	80019b6 <I2C_WaitOnBTFFlagUntilTimeout+0x72>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	695b      	ldr	r3, [r3, #20]
 80019ac:	f003 0304 	and.w	r3, r3, #4
 80019b0:	2b04      	cmp	r3, #4
 80019b2:	d1ce      	bne.n	8001952 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80019b4:	2300      	movs	r3, #0
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3710      	adds	r7, #16
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}

080019be <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{  
 80019be:	b580      	push	{r7, lr}
 80019c0:	b084      	sub	sp, #16
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	60f8      	str	r0, [r7, #12]
 80019c6:	60b9      	str	r1, [r7, #8]
 80019c8:	607a      	str	r2, [r7, #4]

  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80019ca:	e036      	b.n	8001a3a <I2C_WaitOnRXNEFlagUntilTimeout+0x7c>
  {
    /* Check if a STOPF is detected */
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	695b      	ldr	r3, [r3, #20]
 80019d2:	f003 0310 	and.w	r3, r3, #16
 80019d6:	2b10      	cmp	r3, #16
 80019d8:	d114      	bne.n	8001a04 <I2C_WaitOnRXNEFlagUntilTimeout+0x46>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f06f 0210 	mvn.w	r2, #16
 80019e2:	615a      	str	r2, [r3, #20]

      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	2200      	movs	r2, #0
 80019e8:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	2200      	movs	r2, #0
 80019ee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State= HAL_I2C_STATE_READY;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	2220      	movs	r2, #32
 80019f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	2200      	movs	r2, #0
 80019fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001a00:	2301      	movs	r3, #1
 8001a02:	e022      	b.n	8001a4a <I2C_WaitOnRXNEFlagUntilTimeout+0x8c>
    }

    /* Check for the Timeout */
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d007      	beq.n	8001a1a <I2C_WaitOnRXNEFlagUntilTimeout+0x5c>
 8001a0a:	f7fe fe75 	bl	80006f8 <HAL_GetTick>
 8001a0e:	4602      	mov	r2, r0
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	1ad3      	subs	r3, r2, r3
 8001a14:	68ba      	ldr	r2, [r7, #8]
 8001a16:	429a      	cmp	r2, r3
 8001a18:	d20f      	bcs.n	8001a3a <I2C_WaitOnRXNEFlagUntilTimeout+0x7c>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1e:	f043 0220 	orr.w	r2, r3, #32
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->State= HAL_I2C_STATE_READY;
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	2220      	movs	r2, #32
 8001a2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	2200      	movs	r2, #0
 8001a32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_TIMEOUT;
 8001a36:	2303      	movs	r3, #3
 8001a38:	e007      	b.n	8001a4a <I2C_WaitOnRXNEFlagUntilTimeout+0x8c>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	695b      	ldr	r3, [r3, #20]
 8001a40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a44:	2b40      	cmp	r3, #64	; 0x40
 8001a46:	d1c1      	bne.n	80019cc <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001a48:	2300      	movs	r3, #0
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3710      	adds	r7, #16
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}

08001a52 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001a52:	b480      	push	{r7}
 8001a54:	b083      	sub	sp, #12
 8001a56:	af00      	add	r7, sp, #0
 8001a58:	6078      	str	r0, [r7, #4]
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	695b      	ldr	r3, [r3, #20]
 8001a60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a68:	d114      	bne.n	8001a94 <I2C_IsAcknowledgeFailed+0x42>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001a72:	615a      	str	r2, [r3, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2204      	movs	r2, #4
 8001a78:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State= HAL_I2C_STATE_READY;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2220      	movs	r2, #32
 8001a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001a90:	2301      	movs	r3, #1
 8001a92:	e000      	b.n	8001a96 <I2C_IsAcknowledgeFailed+0x44>
  }
  return HAL_OK;
 8001a94:	2300      	movs	r3, #0
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	370c      	adds	r7, #12
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bc80      	pop	{r7}
 8001a9e:	4770      	bx	lr

08001aa0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b086      	sub	sp, #24
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f003 0301 	and.w	r3, r3, #1
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	f000 8087 	beq.w	8001bc8 <HAL_RCC_OscConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001aba:	4b92      	ldr	r3, [pc, #584]	; (8001d04 <HAL_RCC_OscConfig+0x264>)
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	f003 030c 	and.w	r3, r3, #12
 8001ac2:	2b04      	cmp	r3, #4
 8001ac4:	d00c      	beq.n	8001ae0 <HAL_RCC_OscConfig+0x40>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ac6:	4b8f      	ldr	r3, [pc, #572]	; (8001d04 <HAL_RCC_OscConfig+0x264>)
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	f003 030c 	and.w	r3, r3, #12
 8001ace:	2b08      	cmp	r3, #8
 8001ad0:	d112      	bne.n	8001af8 <HAL_RCC_OscConfig+0x58>
 8001ad2:	4b8c      	ldr	r3, [pc, #560]	; (8001d04 <HAL_RCC_OscConfig+0x264>)
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ada:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ade:	d10b      	bne.n	8001af8 <HAL_RCC_OscConfig+0x58>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ae0:	4b88      	ldr	r3, [pc, #544]	; (8001d04 <HAL_RCC_OscConfig+0x264>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d06c      	beq.n	8001bc6 <HAL_RCC_OscConfig+0x126>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d168      	bne.n	8001bc6 <HAL_RCC_OscConfig+0x126>
      {
        return HAL_ERROR;
 8001af4:	2301      	movs	r3, #1
 8001af6:	e22d      	b.n	8001f54 <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b00:	d106      	bne.n	8001b10 <HAL_RCC_OscConfig+0x70>
 8001b02:	4b80      	ldr	r3, [pc, #512]	; (8001d04 <HAL_RCC_OscConfig+0x264>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a7f      	ldr	r2, [pc, #508]	; (8001d04 <HAL_RCC_OscConfig+0x264>)
 8001b08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b0c:	6013      	str	r3, [r2, #0]
 8001b0e:	e02e      	b.n	8001b6e <HAL_RCC_OscConfig+0xce>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d10c      	bne.n	8001b32 <HAL_RCC_OscConfig+0x92>
 8001b18:	4b7a      	ldr	r3, [pc, #488]	; (8001d04 <HAL_RCC_OscConfig+0x264>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a79      	ldr	r2, [pc, #484]	; (8001d04 <HAL_RCC_OscConfig+0x264>)
 8001b1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b22:	6013      	str	r3, [r2, #0]
 8001b24:	4b77      	ldr	r3, [pc, #476]	; (8001d04 <HAL_RCC_OscConfig+0x264>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a76      	ldr	r2, [pc, #472]	; (8001d04 <HAL_RCC_OscConfig+0x264>)
 8001b2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b2e:	6013      	str	r3, [r2, #0]
 8001b30:	e01d      	b.n	8001b6e <HAL_RCC_OscConfig+0xce>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b3a:	d10c      	bne.n	8001b56 <HAL_RCC_OscConfig+0xb6>
 8001b3c:	4b71      	ldr	r3, [pc, #452]	; (8001d04 <HAL_RCC_OscConfig+0x264>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a70      	ldr	r2, [pc, #448]	; (8001d04 <HAL_RCC_OscConfig+0x264>)
 8001b42:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b46:	6013      	str	r3, [r2, #0]
 8001b48:	4b6e      	ldr	r3, [pc, #440]	; (8001d04 <HAL_RCC_OscConfig+0x264>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a6d      	ldr	r2, [pc, #436]	; (8001d04 <HAL_RCC_OscConfig+0x264>)
 8001b4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b52:	6013      	str	r3, [r2, #0]
 8001b54:	e00b      	b.n	8001b6e <HAL_RCC_OscConfig+0xce>
 8001b56:	4b6b      	ldr	r3, [pc, #428]	; (8001d04 <HAL_RCC_OscConfig+0x264>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a6a      	ldr	r2, [pc, #424]	; (8001d04 <HAL_RCC_OscConfig+0x264>)
 8001b5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b60:	6013      	str	r3, [r2, #0]
 8001b62:	4b68      	ldr	r3, [pc, #416]	; (8001d04 <HAL_RCC_OscConfig+0x264>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a67      	ldr	r2, [pc, #412]	; (8001d04 <HAL_RCC_OscConfig+0x264>)
 8001b68:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b6c:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d013      	beq.n	8001b9e <HAL_RCC_OscConfig+0xfe>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b76:	f7fe fdbf 	bl	80006f8 <HAL_GetTick>
 8001b7a:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b7c:	e008      	b.n	8001b90 <HAL_RCC_OscConfig+0xf0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b7e:	f7fe fdbb 	bl	80006f8 <HAL_GetTick>
 8001b82:	4602      	mov	r2, r0
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	1ad3      	subs	r3, r2, r3
 8001b88:	2b64      	cmp	r3, #100	; 0x64
 8001b8a:	d901      	bls.n	8001b90 <HAL_RCC_OscConfig+0xf0>
          {
            return HAL_TIMEOUT;
 8001b8c:	2303      	movs	r3, #3
 8001b8e:	e1e1      	b.n	8001f54 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b90:	4b5c      	ldr	r3, [pc, #368]	; (8001d04 <HAL_RCC_OscConfig+0x264>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d0f0      	beq.n	8001b7e <HAL_RCC_OscConfig+0xde>
 8001b9c:	e014      	b.n	8001bc8 <HAL_RCC_OscConfig+0x128>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b9e:	f7fe fdab 	bl	80006f8 <HAL_GetTick>
 8001ba2:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ba4:	e008      	b.n	8001bb8 <HAL_RCC_OscConfig+0x118>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ba6:	f7fe fda7 	bl	80006f8 <HAL_GetTick>
 8001baa:	4602      	mov	r2, r0
 8001bac:	693b      	ldr	r3, [r7, #16]
 8001bae:	1ad3      	subs	r3, r2, r3
 8001bb0:	2b64      	cmp	r3, #100	; 0x64
 8001bb2:	d901      	bls.n	8001bb8 <HAL_RCC_OscConfig+0x118>
          {
            return HAL_TIMEOUT;
 8001bb4:	2303      	movs	r3, #3
 8001bb6:	e1cd      	b.n	8001f54 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bb8:	4b52      	ldr	r3, [pc, #328]	; (8001d04 <HAL_RCC_OscConfig+0x264>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d1f0      	bne.n	8001ba6 <HAL_RCC_OscConfig+0x106>
 8001bc4:	e000      	b.n	8001bc8 <HAL_RCC_OscConfig+0x128>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bc6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f003 0302 	and.w	r3, r3, #2
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d063      	beq.n	8001c9c <HAL_RCC_OscConfig+0x1fc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001bd4:	4b4b      	ldr	r3, [pc, #300]	; (8001d04 <HAL_RCC_OscConfig+0x264>)
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	f003 030c 	and.w	r3, r3, #12
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d00b      	beq.n	8001bf8 <HAL_RCC_OscConfig+0x158>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001be0:	4b48      	ldr	r3, [pc, #288]	; (8001d04 <HAL_RCC_OscConfig+0x264>)
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f003 030c 	and.w	r3, r3, #12
 8001be8:	2b08      	cmp	r3, #8
 8001bea:	d11c      	bne.n	8001c26 <HAL_RCC_OscConfig+0x186>
 8001bec:	4b45      	ldr	r3, [pc, #276]	; (8001d04 <HAL_RCC_OscConfig+0x264>)
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d116      	bne.n	8001c26 <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bf8:	4b42      	ldr	r3, [pc, #264]	; (8001d04 <HAL_RCC_OscConfig+0x264>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f003 0302 	and.w	r3, r3, #2
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d005      	beq.n	8001c10 <HAL_RCC_OscConfig+0x170>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	691b      	ldr	r3, [r3, #16]
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	d001      	beq.n	8001c10 <HAL_RCC_OscConfig+0x170>
      {
        return HAL_ERROR;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e1a1      	b.n	8001f54 <HAL_RCC_OscConfig+0x4b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c10:	4b3c      	ldr	r3, [pc, #240]	; (8001d04 <HAL_RCC_OscConfig+0x264>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	695b      	ldr	r3, [r3, #20]
 8001c1c:	00db      	lsls	r3, r3, #3
 8001c1e:	4939      	ldr	r1, [pc, #228]	; (8001d04 <HAL_RCC_OscConfig+0x264>)
 8001c20:	4313      	orrs	r3, r2
 8001c22:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c24:	e03a      	b.n	8001c9c <HAL_RCC_OscConfig+0x1fc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	691b      	ldr	r3, [r3, #16]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d020      	beq.n	8001c70 <HAL_RCC_OscConfig+0x1d0>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c2e:	4b36      	ldr	r3, [pc, #216]	; (8001d08 <HAL_RCC_OscConfig+0x268>)
 8001c30:	2201      	movs	r2, #1
 8001c32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c34:	f7fe fd60 	bl	80006f8 <HAL_GetTick>
 8001c38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c3a:	e008      	b.n	8001c4e <HAL_RCC_OscConfig+0x1ae>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c3c:	f7fe fd5c 	bl	80006f8 <HAL_GetTick>
 8001c40:	4602      	mov	r2, r0
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d901      	bls.n	8001c4e <HAL_RCC_OscConfig+0x1ae>
          {
            return HAL_TIMEOUT;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	e182      	b.n	8001f54 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c4e:	4b2d      	ldr	r3, [pc, #180]	; (8001d04 <HAL_RCC_OscConfig+0x264>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f003 0302 	and.w	r3, r3, #2
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d0f0      	beq.n	8001c3c <HAL_RCC_OscConfig+0x19c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c5a:	4b2a      	ldr	r3, [pc, #168]	; (8001d04 <HAL_RCC_OscConfig+0x264>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	695b      	ldr	r3, [r3, #20]
 8001c66:	00db      	lsls	r3, r3, #3
 8001c68:	4926      	ldr	r1, [pc, #152]	; (8001d04 <HAL_RCC_OscConfig+0x264>)
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	600b      	str	r3, [r1, #0]
 8001c6e:	e015      	b.n	8001c9c <HAL_RCC_OscConfig+0x1fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c70:	4b25      	ldr	r3, [pc, #148]	; (8001d08 <HAL_RCC_OscConfig+0x268>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c76:	f7fe fd3f 	bl	80006f8 <HAL_GetTick>
 8001c7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c7c:	e008      	b.n	8001c90 <HAL_RCC_OscConfig+0x1f0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c7e:	f7fe fd3b 	bl	80006f8 <HAL_GetTick>
 8001c82:	4602      	mov	r2, r0
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	1ad3      	subs	r3, r2, r3
 8001c88:	2b02      	cmp	r3, #2
 8001c8a:	d901      	bls.n	8001c90 <HAL_RCC_OscConfig+0x1f0>
          {
            return HAL_TIMEOUT;
 8001c8c:	2303      	movs	r3, #3
 8001c8e:	e161      	b.n	8001f54 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c90:	4b1c      	ldr	r3, [pc, #112]	; (8001d04 <HAL_RCC_OscConfig+0x264>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f003 0302 	and.w	r3, r3, #2
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d1f0      	bne.n	8001c7e <HAL_RCC_OscConfig+0x1de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f003 0308 	and.w	r3, r3, #8
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d039      	beq.n	8001d1c <HAL_RCC_OscConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	699b      	ldr	r3, [r3, #24]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d019      	beq.n	8001ce4 <HAL_RCC_OscConfig+0x244>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cb0:	4b16      	ldr	r3, [pc, #88]	; (8001d0c <HAL_RCC_OscConfig+0x26c>)
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cb6:	f7fe fd1f 	bl	80006f8 <HAL_GetTick>
 8001cba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cbc:	e008      	b.n	8001cd0 <HAL_RCC_OscConfig+0x230>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cbe:	f7fe fd1b 	bl	80006f8 <HAL_GetTick>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	1ad3      	subs	r3, r2, r3
 8001cc8:	2b02      	cmp	r3, #2
 8001cca:	d901      	bls.n	8001cd0 <HAL_RCC_OscConfig+0x230>
        {
          return HAL_TIMEOUT;
 8001ccc:	2303      	movs	r3, #3
 8001cce:	e141      	b.n	8001f54 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cd0:	4b0c      	ldr	r3, [pc, #48]	; (8001d04 <HAL_RCC_OscConfig+0x264>)
 8001cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd4:	f003 0302 	and.w	r3, r3, #2
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d0f0      	beq.n	8001cbe <HAL_RCC_OscConfig+0x21e>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      RCC_Delay(1);
 8001cdc:	2001      	movs	r0, #1
 8001cde:	f000 facf 	bl	8002280 <RCC_Delay>
 8001ce2:	e01b      	b.n	8001d1c <HAL_RCC_OscConfig+0x27c>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ce4:	4b09      	ldr	r3, [pc, #36]	; (8001d0c <HAL_RCC_OscConfig+0x26c>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cea:	f7fe fd05 	bl	80006f8 <HAL_GetTick>
 8001cee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cf0:	e00e      	b.n	8001d10 <HAL_RCC_OscConfig+0x270>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cf2:	f7fe fd01 	bl	80006f8 <HAL_GetTick>
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	1ad3      	subs	r3, r2, r3
 8001cfc:	2b02      	cmp	r3, #2
 8001cfe:	d907      	bls.n	8001d10 <HAL_RCC_OscConfig+0x270>
        {
          return HAL_TIMEOUT;
 8001d00:	2303      	movs	r3, #3
 8001d02:	e127      	b.n	8001f54 <HAL_RCC_OscConfig+0x4b4>
 8001d04:	40021000 	.word	0x40021000
 8001d08:	42420000 	.word	0x42420000
 8001d0c:	42420480 	.word	0x42420480
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d10:	4b92      	ldr	r3, [pc, #584]	; (8001f5c <HAL_RCC_OscConfig+0x4bc>)
 8001d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d14:	f003 0302 	and.w	r3, r3, #2
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d1ea      	bne.n	8001cf2 <HAL_RCC_OscConfig+0x252>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f003 0304 	and.w	r3, r3, #4
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	f000 80a6 	beq.w	8001e76 <HAL_RCC_OscConfig+0x3d6>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d2e:	4b8b      	ldr	r3, [pc, #556]	; (8001f5c <HAL_RCC_OscConfig+0x4bc>)
 8001d30:	69db      	ldr	r3, [r3, #28]
 8001d32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d10d      	bne.n	8001d56 <HAL_RCC_OscConfig+0x2b6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d3a:	4b88      	ldr	r3, [pc, #544]	; (8001f5c <HAL_RCC_OscConfig+0x4bc>)
 8001d3c:	69db      	ldr	r3, [r3, #28]
 8001d3e:	4a87      	ldr	r2, [pc, #540]	; (8001f5c <HAL_RCC_OscConfig+0x4bc>)
 8001d40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d44:	61d3      	str	r3, [r2, #28]
 8001d46:	4b85      	ldr	r3, [pc, #532]	; (8001f5c <HAL_RCC_OscConfig+0x4bc>)
 8001d48:	69db      	ldr	r3, [r3, #28]
 8001d4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d4e:	60fb      	str	r3, [r7, #12]
 8001d50:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001d52:	2301      	movs	r3, #1
 8001d54:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d56:	4b82      	ldr	r3, [pc, #520]	; (8001f60 <HAL_RCC_OscConfig+0x4c0>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d118      	bne.n	8001d94 <HAL_RCC_OscConfig+0x2f4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d62:	4b7f      	ldr	r3, [pc, #508]	; (8001f60 <HAL_RCC_OscConfig+0x4c0>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a7e      	ldr	r2, [pc, #504]	; (8001f60 <HAL_RCC_OscConfig+0x4c0>)
 8001d68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d6e:	f7fe fcc3 	bl	80006f8 <HAL_GetTick>
 8001d72:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d74:	e008      	b.n	8001d88 <HAL_RCC_OscConfig+0x2e8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d76:	f7fe fcbf 	bl	80006f8 <HAL_GetTick>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	1ad3      	subs	r3, r2, r3
 8001d80:	2b64      	cmp	r3, #100	; 0x64
 8001d82:	d901      	bls.n	8001d88 <HAL_RCC_OscConfig+0x2e8>
        {
          return HAL_TIMEOUT;
 8001d84:	2303      	movs	r3, #3
 8001d86:	e0e5      	b.n	8001f54 <HAL_RCC_OscConfig+0x4b4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d88:	4b75      	ldr	r3, [pc, #468]	; (8001f60 <HAL_RCC_OscConfig+0x4c0>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d0f0      	beq.n	8001d76 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	d106      	bne.n	8001daa <HAL_RCC_OscConfig+0x30a>
 8001d9c:	4b6f      	ldr	r3, [pc, #444]	; (8001f5c <HAL_RCC_OscConfig+0x4bc>)
 8001d9e:	6a1b      	ldr	r3, [r3, #32]
 8001da0:	4a6e      	ldr	r2, [pc, #440]	; (8001f5c <HAL_RCC_OscConfig+0x4bc>)
 8001da2:	f043 0301 	orr.w	r3, r3, #1
 8001da6:	6213      	str	r3, [r2, #32]
 8001da8:	e02d      	b.n	8001e06 <HAL_RCC_OscConfig+0x366>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	68db      	ldr	r3, [r3, #12]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d10c      	bne.n	8001dcc <HAL_RCC_OscConfig+0x32c>
 8001db2:	4b6a      	ldr	r3, [pc, #424]	; (8001f5c <HAL_RCC_OscConfig+0x4bc>)
 8001db4:	6a1b      	ldr	r3, [r3, #32]
 8001db6:	4a69      	ldr	r2, [pc, #420]	; (8001f5c <HAL_RCC_OscConfig+0x4bc>)
 8001db8:	f023 0301 	bic.w	r3, r3, #1
 8001dbc:	6213      	str	r3, [r2, #32]
 8001dbe:	4b67      	ldr	r3, [pc, #412]	; (8001f5c <HAL_RCC_OscConfig+0x4bc>)
 8001dc0:	6a1b      	ldr	r3, [r3, #32]
 8001dc2:	4a66      	ldr	r2, [pc, #408]	; (8001f5c <HAL_RCC_OscConfig+0x4bc>)
 8001dc4:	f023 0304 	bic.w	r3, r3, #4
 8001dc8:	6213      	str	r3, [r2, #32]
 8001dca:	e01c      	b.n	8001e06 <HAL_RCC_OscConfig+0x366>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	2b05      	cmp	r3, #5
 8001dd2:	d10c      	bne.n	8001dee <HAL_RCC_OscConfig+0x34e>
 8001dd4:	4b61      	ldr	r3, [pc, #388]	; (8001f5c <HAL_RCC_OscConfig+0x4bc>)
 8001dd6:	6a1b      	ldr	r3, [r3, #32]
 8001dd8:	4a60      	ldr	r2, [pc, #384]	; (8001f5c <HAL_RCC_OscConfig+0x4bc>)
 8001dda:	f043 0304 	orr.w	r3, r3, #4
 8001dde:	6213      	str	r3, [r2, #32]
 8001de0:	4b5e      	ldr	r3, [pc, #376]	; (8001f5c <HAL_RCC_OscConfig+0x4bc>)
 8001de2:	6a1b      	ldr	r3, [r3, #32]
 8001de4:	4a5d      	ldr	r2, [pc, #372]	; (8001f5c <HAL_RCC_OscConfig+0x4bc>)
 8001de6:	f043 0301 	orr.w	r3, r3, #1
 8001dea:	6213      	str	r3, [r2, #32]
 8001dec:	e00b      	b.n	8001e06 <HAL_RCC_OscConfig+0x366>
 8001dee:	4b5b      	ldr	r3, [pc, #364]	; (8001f5c <HAL_RCC_OscConfig+0x4bc>)
 8001df0:	6a1b      	ldr	r3, [r3, #32]
 8001df2:	4a5a      	ldr	r2, [pc, #360]	; (8001f5c <HAL_RCC_OscConfig+0x4bc>)
 8001df4:	f023 0301 	bic.w	r3, r3, #1
 8001df8:	6213      	str	r3, [r2, #32]
 8001dfa:	4b58      	ldr	r3, [pc, #352]	; (8001f5c <HAL_RCC_OscConfig+0x4bc>)
 8001dfc:	6a1b      	ldr	r3, [r3, #32]
 8001dfe:	4a57      	ldr	r2, [pc, #348]	; (8001f5c <HAL_RCC_OscConfig+0x4bc>)
 8001e00:	f023 0304 	bic.w	r3, r3, #4
 8001e04:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	68db      	ldr	r3, [r3, #12]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d015      	beq.n	8001e3a <HAL_RCC_OscConfig+0x39a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e0e:	f7fe fc73 	bl	80006f8 <HAL_GetTick>
 8001e12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e14:	e00a      	b.n	8001e2c <HAL_RCC_OscConfig+0x38c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e16:	f7fe fc6f 	bl	80006f8 <HAL_GetTick>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	1ad3      	subs	r3, r2, r3
 8001e20:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d901      	bls.n	8001e2c <HAL_RCC_OscConfig+0x38c>
        {
          return HAL_TIMEOUT;
 8001e28:	2303      	movs	r3, #3
 8001e2a:	e093      	b.n	8001f54 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e2c:	4b4b      	ldr	r3, [pc, #300]	; (8001f5c <HAL_RCC_OscConfig+0x4bc>)
 8001e2e:	6a1b      	ldr	r3, [r3, #32]
 8001e30:	f003 0302 	and.w	r3, r3, #2
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d0ee      	beq.n	8001e16 <HAL_RCC_OscConfig+0x376>
 8001e38:	e014      	b.n	8001e64 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e3a:	f7fe fc5d 	bl	80006f8 <HAL_GetTick>
 8001e3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e40:	e00a      	b.n	8001e58 <HAL_RCC_OscConfig+0x3b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e42:	f7fe fc59 	bl	80006f8 <HAL_GetTick>
 8001e46:	4602      	mov	r2, r0
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	1ad3      	subs	r3, r2, r3
 8001e4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d901      	bls.n	8001e58 <HAL_RCC_OscConfig+0x3b8>
        {
          return HAL_TIMEOUT;
 8001e54:	2303      	movs	r3, #3
 8001e56:	e07d      	b.n	8001f54 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e58:	4b40      	ldr	r3, [pc, #256]	; (8001f5c <HAL_RCC_OscConfig+0x4bc>)
 8001e5a:	6a1b      	ldr	r3, [r3, #32]
 8001e5c:	f003 0302 	and.w	r3, r3, #2
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d1ee      	bne.n	8001e42 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001e64:	7dfb      	ldrb	r3, [r7, #23]
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d105      	bne.n	8001e76 <HAL_RCC_OscConfig+0x3d6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e6a:	4b3c      	ldr	r3, [pc, #240]	; (8001f5c <HAL_RCC_OscConfig+0x4bc>)
 8001e6c:	69db      	ldr	r3, [r3, #28]
 8001e6e:	4a3b      	ldr	r2, [pc, #236]	; (8001f5c <HAL_RCC_OscConfig+0x4bc>)
 8001e70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e74:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	69db      	ldr	r3, [r3, #28]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d069      	beq.n	8001f52 <HAL_RCC_OscConfig+0x4b2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e7e:	4b37      	ldr	r3, [pc, #220]	; (8001f5c <HAL_RCC_OscConfig+0x4bc>)
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	f003 030c 	and.w	r3, r3, #12
 8001e86:	2b08      	cmp	r3, #8
 8001e88:	d061      	beq.n	8001f4e <HAL_RCC_OscConfig+0x4ae>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	69db      	ldr	r3, [r3, #28]
 8001e8e:	2b02      	cmp	r3, #2
 8001e90:	d146      	bne.n	8001f20 <HAL_RCC_OscConfig+0x480>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e92:	4b34      	ldr	r3, [pc, #208]	; (8001f64 <HAL_RCC_OscConfig+0x4c4>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e98:	f7fe fc2e 	bl	80006f8 <HAL_GetTick>
 8001e9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e9e:	e008      	b.n	8001eb2 <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ea0:	f7fe fc2a 	bl	80006f8 <HAL_GetTick>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	2b02      	cmp	r3, #2
 8001eac:	d901      	bls.n	8001eb2 <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	e050      	b.n	8001f54 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001eb2:	4b2a      	ldr	r3, [pc, #168]	; (8001f5c <HAL_RCC_OscConfig+0x4bc>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d1f0      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x400>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6a1b      	ldr	r3, [r3, #32]
 8001ec2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ec6:	d108      	bne.n	8001eda <HAL_RCC_OscConfig+0x43a>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001ec8:	4b24      	ldr	r3, [pc, #144]	; (8001f5c <HAL_RCC_OscConfig+0x4bc>)
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	4921      	ldr	r1, [pc, #132]	; (8001f5c <HAL_RCC_OscConfig+0x4bc>)
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001eda:	4b20      	ldr	r3, [pc, #128]	; (8001f5c <HAL_RCC_OscConfig+0x4bc>)
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6a19      	ldr	r1, [r3, #32]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eea:	430b      	orrs	r3, r1
 8001eec:	491b      	ldr	r1, [pc, #108]	; (8001f5c <HAL_RCC_OscConfig+0x4bc>)
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ef2:	4b1c      	ldr	r3, [pc, #112]	; (8001f64 <HAL_RCC_OscConfig+0x4c4>)
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ef8:	f7fe fbfe 	bl	80006f8 <HAL_GetTick>
 8001efc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001efe:	e008      	b.n	8001f12 <HAL_RCC_OscConfig+0x472>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f00:	f7fe fbfa 	bl	80006f8 <HAL_GetTick>
 8001f04:	4602      	mov	r2, r0
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	2b02      	cmp	r3, #2
 8001f0c:	d901      	bls.n	8001f12 <HAL_RCC_OscConfig+0x472>
          {
            return HAL_TIMEOUT;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	e020      	b.n	8001f54 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f12:	4b12      	ldr	r3, [pc, #72]	; (8001f5c <HAL_RCC_OscConfig+0x4bc>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d0f0      	beq.n	8001f00 <HAL_RCC_OscConfig+0x460>
 8001f1e:	e018      	b.n	8001f52 <HAL_RCC_OscConfig+0x4b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f20:	4b10      	ldr	r3, [pc, #64]	; (8001f64 <HAL_RCC_OscConfig+0x4c4>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f26:	f7fe fbe7 	bl	80006f8 <HAL_GetTick>
 8001f2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f2c:	e008      	b.n	8001f40 <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f2e:	f7fe fbe3 	bl	80006f8 <HAL_GetTick>
 8001f32:	4602      	mov	r2, r0
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	1ad3      	subs	r3, r2, r3
 8001f38:	2b02      	cmp	r3, #2
 8001f3a:	d901      	bls.n	8001f40 <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 8001f3c:	2303      	movs	r3, #3
 8001f3e:	e009      	b.n	8001f54 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f40:	4b06      	ldr	r3, [pc, #24]	; (8001f5c <HAL_RCC_OscConfig+0x4bc>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d1f0      	bne.n	8001f2e <HAL_RCC_OscConfig+0x48e>
 8001f4c:	e001      	b.n	8001f52 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e000      	b.n	8001f54 <HAL_RCC_OscConfig+0x4b4>
    }
  }
  
  return HAL_OK;
 8001f52:	2300      	movs	r3, #0
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3718      	adds	r7, #24
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	40021000 	.word	0x40021000
 8001f60:	40007000 	.word	0x40007000
 8001f64:	42420060 	.word	0x42420060

08001f68 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b084      	sub	sp, #16
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
 8001f70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001f72:	2300      	movs	r3, #0
 8001f74:	60fb      	str	r3, [r7, #12]
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001f76:	4b7e      	ldr	r3, [pc, #504]	; (8002170 <HAL_RCC_ClockConfig+0x208>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 0307 	and.w	r3, r3, #7
 8001f7e:	683a      	ldr	r2, [r7, #0]
 8001f80:	429a      	cmp	r2, r3
 8001f82:	d910      	bls.n	8001fa6 <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f84:	4b7a      	ldr	r3, [pc, #488]	; (8002170 <HAL_RCC_ClockConfig+0x208>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f023 0207 	bic.w	r2, r3, #7
 8001f8c:	4978      	ldr	r1, [pc, #480]	; (8002170 <HAL_RCC_ClockConfig+0x208>)
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	4313      	orrs	r3, r2
 8001f92:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001f94:	4b76      	ldr	r3, [pc, #472]	; (8002170 <HAL_RCC_ClockConfig+0x208>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 0307 	and.w	r3, r3, #7
 8001f9c:	683a      	ldr	r2, [r7, #0]
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d001      	beq.n	8001fa6 <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e0e0      	b.n	8002168 <HAL_RCC_ClockConfig+0x200>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 0302 	and.w	r3, r3, #2
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d020      	beq.n	8001ff4 <HAL_RCC_ClockConfig+0x8c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 0304 	and.w	r3, r3, #4
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d005      	beq.n	8001fca <HAL_RCC_ClockConfig+0x62>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fbe:	4b6d      	ldr	r3, [pc, #436]	; (8002174 <HAL_RCC_ClockConfig+0x20c>)
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	4a6c      	ldr	r2, [pc, #432]	; (8002174 <HAL_RCC_ClockConfig+0x20c>)
 8001fc4:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001fc8:	6053      	str	r3, [r2, #4]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 0308 	and.w	r3, r3, #8
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d005      	beq.n	8001fe2 <HAL_RCC_ClockConfig+0x7a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001fd6:	4b67      	ldr	r3, [pc, #412]	; (8002174 <HAL_RCC_ClockConfig+0x20c>)
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	4a66      	ldr	r2, [pc, #408]	; (8002174 <HAL_RCC_ClockConfig+0x20c>)
 8001fdc:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001fe0:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fe2:	4b64      	ldr	r3, [pc, #400]	; (8002174 <HAL_RCC_ClockConfig+0x20c>)
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	4961      	ldr	r1, [pc, #388]	; (8002174 <HAL_RCC_ClockConfig+0x20c>)
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f003 0301 	and.w	r3, r3, #1
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d06a      	beq.n	80020d6 <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	2b01      	cmp	r3, #1
 8002006:	d107      	bne.n	8002018 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002008:	4b5a      	ldr	r3, [pc, #360]	; (8002174 <HAL_RCC_ClockConfig+0x20c>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002010:	2b00      	cmp	r3, #0
 8002012:	d115      	bne.n	8002040 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8002014:	2301      	movs	r3, #1
 8002016:	e0a7      	b.n	8002168 <HAL_RCC_ClockConfig+0x200>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	2b02      	cmp	r3, #2
 800201e:	d107      	bne.n	8002030 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002020:	4b54      	ldr	r3, [pc, #336]	; (8002174 <HAL_RCC_ClockConfig+0x20c>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002028:	2b00      	cmp	r3, #0
 800202a:	d109      	bne.n	8002040 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 800202c:	2301      	movs	r3, #1
 800202e:	e09b      	b.n	8002168 <HAL_RCC_ClockConfig+0x200>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002030:	4b50      	ldr	r3, [pc, #320]	; (8002174 <HAL_RCC_ClockConfig+0x20c>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f003 0302 	and.w	r3, r3, #2
 8002038:	2b00      	cmp	r3, #0
 800203a:	d101      	bne.n	8002040 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 800203c:	2301      	movs	r3, #1
 800203e:	e093      	b.n	8002168 <HAL_RCC_ClockConfig+0x200>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002040:	4b4c      	ldr	r3, [pc, #304]	; (8002174 <HAL_RCC_ClockConfig+0x20c>)
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	f023 0203 	bic.w	r2, r3, #3
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	4949      	ldr	r1, [pc, #292]	; (8002174 <HAL_RCC_ClockConfig+0x20c>)
 800204e:	4313      	orrs	r3, r2
 8002050:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002052:	f7fe fb51 	bl	80006f8 <HAL_GetTick>
 8002056:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	2b01      	cmp	r3, #1
 800205e:	d112      	bne.n	8002086 <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002060:	e00a      	b.n	8002078 <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002062:	f7fe fb49 	bl	80006f8 <HAL_GetTick>
 8002066:	4602      	mov	r2, r0
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	1ad3      	subs	r3, r2, r3
 800206c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002070:	4293      	cmp	r3, r2
 8002072:	d901      	bls.n	8002078 <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 8002074:	2303      	movs	r3, #3
 8002076:	e077      	b.n	8002168 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002078:	4b3e      	ldr	r3, [pc, #248]	; (8002174 <HAL_RCC_ClockConfig+0x20c>)
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	f003 030c 	and.w	r3, r3, #12
 8002080:	2b04      	cmp	r3, #4
 8002082:	d1ee      	bne.n	8002062 <HAL_RCC_ClockConfig+0xfa>
 8002084:	e027      	b.n	80020d6 <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	2b02      	cmp	r3, #2
 800208c:	d11d      	bne.n	80020ca <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800208e:	e00a      	b.n	80020a6 <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002090:	f7fe fb32 	bl	80006f8 <HAL_GetTick>
 8002094:	4602      	mov	r2, r0
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	f241 3288 	movw	r2, #5000	; 0x1388
 800209e:	4293      	cmp	r3, r2
 80020a0:	d901      	bls.n	80020a6 <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 80020a2:	2303      	movs	r3, #3
 80020a4:	e060      	b.n	8002168 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020a6:	4b33      	ldr	r3, [pc, #204]	; (8002174 <HAL_RCC_ClockConfig+0x20c>)
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	f003 030c 	and.w	r3, r3, #12
 80020ae:	2b08      	cmp	r3, #8
 80020b0:	d1ee      	bne.n	8002090 <HAL_RCC_ClockConfig+0x128>
 80020b2:	e010      	b.n	80020d6 <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020b4:	f7fe fb20 	bl	80006f8 <HAL_GetTick>
 80020b8:	4602      	mov	r2, r0
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	1ad3      	subs	r3, r2, r3
 80020be:	f241 3288 	movw	r2, #5000	; 0x1388
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d901      	bls.n	80020ca <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 80020c6:	2303      	movs	r3, #3
 80020c8:	e04e      	b.n	8002168 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80020ca:	4b2a      	ldr	r3, [pc, #168]	; (8002174 <HAL_RCC_ClockConfig+0x20c>)
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	f003 030c 	and.w	r3, r3, #12
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d1ee      	bne.n	80020b4 <HAL_RCC_ClockConfig+0x14c>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80020d6:	4b26      	ldr	r3, [pc, #152]	; (8002170 <HAL_RCC_ClockConfig+0x208>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 0307 	and.w	r3, r3, #7
 80020de:	683a      	ldr	r2, [r7, #0]
 80020e0:	429a      	cmp	r2, r3
 80020e2:	d210      	bcs.n	8002106 <HAL_RCC_ClockConfig+0x19e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020e4:	4b22      	ldr	r3, [pc, #136]	; (8002170 <HAL_RCC_ClockConfig+0x208>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f023 0207 	bic.w	r2, r3, #7
 80020ec:	4920      	ldr	r1, [pc, #128]	; (8002170 <HAL_RCC_ClockConfig+0x208>)
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	4313      	orrs	r3, r2
 80020f2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80020f4:	4b1e      	ldr	r3, [pc, #120]	; (8002170 <HAL_RCC_ClockConfig+0x208>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 0307 	and.w	r3, r3, #7
 80020fc:	683a      	ldr	r2, [r7, #0]
 80020fe:	429a      	cmp	r2, r3
 8002100:	d001      	beq.n	8002106 <HAL_RCC_ClockConfig+0x19e>
    {
      return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e030      	b.n	8002168 <HAL_RCC_ClockConfig+0x200>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f003 0304 	and.w	r3, r3, #4
 800210e:	2b00      	cmp	r3, #0
 8002110:	d008      	beq.n	8002124 <HAL_RCC_ClockConfig+0x1bc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002112:	4b18      	ldr	r3, [pc, #96]	; (8002174 <HAL_RCC_ClockConfig+0x20c>)
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	68db      	ldr	r3, [r3, #12]
 800211e:	4915      	ldr	r1, [pc, #84]	; (8002174 <HAL_RCC_ClockConfig+0x20c>)
 8002120:	4313      	orrs	r3, r2
 8002122:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 0308 	and.w	r3, r3, #8
 800212c:	2b00      	cmp	r3, #0
 800212e:	d009      	beq.n	8002144 <HAL_RCC_ClockConfig+0x1dc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002130:	4b10      	ldr	r3, [pc, #64]	; (8002174 <HAL_RCC_ClockConfig+0x20c>)
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	691b      	ldr	r3, [r3, #16]
 800213c:	00db      	lsls	r3, r3, #3
 800213e:	490d      	ldr	r1, [pc, #52]	; (8002174 <HAL_RCC_ClockConfig+0x20c>)
 8002140:	4313      	orrs	r3, r2
 8002142:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002144:	f000 f81c 	bl	8002180 <HAL_RCC_GetSysClockFreq>
 8002148:	4601      	mov	r1, r0
 800214a:	4b0a      	ldr	r3, [pc, #40]	; (8002174 <HAL_RCC_ClockConfig+0x20c>)
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	091b      	lsrs	r3, r3, #4
 8002150:	f003 030f 	and.w	r3, r3, #15
 8002154:	4a08      	ldr	r2, [pc, #32]	; (8002178 <HAL_RCC_ClockConfig+0x210>)
 8002156:	5cd3      	ldrb	r3, [r2, r3]
 8002158:	fa21 f303 	lsr.w	r3, r1, r3
 800215c:	4a07      	ldr	r2, [pc, #28]	; (800217c <HAL_RCC_ClockConfig+0x214>)
 800215e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002160:	2000      	movs	r0, #0
 8002162:	f7fe fa87 	bl	8000674 <HAL_InitTick>
  
  return HAL_OK;
 8002166:	2300      	movs	r3, #0
}
 8002168:	4618      	mov	r0, r3
 800216a:	3710      	adds	r7, #16
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}
 8002170:	40022000 	.word	0x40022000
 8002174:	40021000 	.word	0x40021000
 8002178:	08002838 	.word	0x08002838
 800217c:	20000008 	.word	0x20000008

08002180 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002180:	b490      	push	{r4, r7}
 8002182:	b08a      	sub	sp, #40	; 0x28
 8002184:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002186:	4b2a      	ldr	r3, [pc, #168]	; (8002230 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002188:	1d3c      	adds	r4, r7, #4
 800218a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800218c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002190:	4b28      	ldr	r3, [pc, #160]	; (8002234 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002192:	881b      	ldrh	r3, [r3, #0]
 8002194:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002196:	2300      	movs	r3, #0
 8002198:	61fb      	str	r3, [r7, #28]
 800219a:	2300      	movs	r3, #0
 800219c:	61bb      	str	r3, [r7, #24]
 800219e:	2300      	movs	r3, #0
 80021a0:	627b      	str	r3, [r7, #36]	; 0x24
 80021a2:	2300      	movs	r3, #0
 80021a4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80021a6:	2300      	movs	r3, #0
 80021a8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80021aa:	4b23      	ldr	r3, [pc, #140]	; (8002238 <HAL_RCC_GetSysClockFreq+0xb8>)
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80021b0:	69fb      	ldr	r3, [r7, #28]
 80021b2:	f003 030c 	and.w	r3, r3, #12
 80021b6:	2b04      	cmp	r3, #4
 80021b8:	d002      	beq.n	80021c0 <HAL_RCC_GetSysClockFreq+0x40>
 80021ba:	2b08      	cmp	r3, #8
 80021bc:	d003      	beq.n	80021c6 <HAL_RCC_GetSysClockFreq+0x46>
 80021be:	e02d      	b.n	800221c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80021c0:	4b1e      	ldr	r3, [pc, #120]	; (800223c <HAL_RCC_GetSysClockFreq+0xbc>)
 80021c2:	623b      	str	r3, [r7, #32]
      break;
 80021c4:	e02d      	b.n	8002222 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	0c9b      	lsrs	r3, r3, #18
 80021ca:	f003 030f 	and.w	r3, r3, #15
 80021ce:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80021d2:	4413      	add	r3, r2
 80021d4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80021d8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d013      	beq.n	800220c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80021e4:	4b14      	ldr	r3, [pc, #80]	; (8002238 <HAL_RCC_GetSysClockFreq+0xb8>)
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	0c5b      	lsrs	r3, r3, #17
 80021ea:	f003 0301 	and.w	r3, r3, #1
 80021ee:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80021f2:	4413      	add	r3, r2
 80021f4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80021f8:	61bb      	str	r3, [r7, #24]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	4a0f      	ldr	r2, [pc, #60]	; (800223c <HAL_RCC_GetSysClockFreq+0xbc>)
 80021fe:	fb02 f203 	mul.w	r2, r2, r3
 8002202:	69bb      	ldr	r3, [r7, #24]
 8002204:	fbb2 f3f3 	udiv	r3, r2, r3
 8002208:	627b      	str	r3, [r7, #36]	; 0x24
 800220a:	e004      	b.n	8002216 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	4a0c      	ldr	r2, [pc, #48]	; (8002240 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002210:	fb02 f303 	mul.w	r3, r2, r3
 8002214:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002218:	623b      	str	r3, [r7, #32]
      break;
 800221a:	e002      	b.n	8002222 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800221c:	4b07      	ldr	r3, [pc, #28]	; (800223c <HAL_RCC_GetSysClockFreq+0xbc>)
 800221e:	623b      	str	r3, [r7, #32]
      break;
 8002220:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002222:	6a3b      	ldr	r3, [r7, #32]
}
 8002224:	4618      	mov	r0, r3
 8002226:	3728      	adds	r7, #40	; 0x28
 8002228:	46bd      	mov	sp, r7
 800222a:	bc90      	pop	{r4, r7}
 800222c:	4770      	bx	lr
 800222e:	bf00      	nop
 8002230:	08002824 	.word	0x08002824
 8002234:	08002834 	.word	0x08002834
 8002238:	40021000 	.word	0x40021000
 800223c:	007a1200 	.word	0x007a1200
 8002240:	003d0900 	.word	0x003d0900

08002244 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002244:	b480      	push	{r7}
 8002246:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002248:	4b02      	ldr	r3, [pc, #8]	; (8002254 <HAL_RCC_GetHCLKFreq+0x10>)
 800224a:	681b      	ldr	r3, [r3, #0]
}
 800224c:	4618      	mov	r0, r3
 800224e:	46bd      	mov	sp, r7
 8002250:	bc80      	pop	{r7}
 8002252:	4770      	bx	lr
 8002254:	20000008 	.word	0x20000008

08002258 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800225c:	f7ff fff2 	bl	8002244 <HAL_RCC_GetHCLKFreq>
 8002260:	4601      	mov	r1, r0
 8002262:	4b05      	ldr	r3, [pc, #20]	; (8002278 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	0a1b      	lsrs	r3, r3, #8
 8002268:	f003 0307 	and.w	r3, r3, #7
 800226c:	4a03      	ldr	r2, [pc, #12]	; (800227c <HAL_RCC_GetPCLK1Freq+0x24>)
 800226e:	5cd3      	ldrb	r3, [r2, r3]
 8002270:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002274:	4618      	mov	r0, r3
 8002276:	bd80      	pop	{r7, pc}
 8002278:	40021000 	.word	0x40021000
 800227c:	08002848 	.word	0x08002848

08002280 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002280:	b480      	push	{r7}
 8002282:	b085      	sub	sp, #20
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002288:	4b0a      	ldr	r3, [pc, #40]	; (80022b4 <RCC_Delay+0x34>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a0a      	ldr	r2, [pc, #40]	; (80022b8 <RCC_Delay+0x38>)
 800228e:	fba2 2303 	umull	r2, r3, r2, r3
 8002292:	0a5b      	lsrs	r3, r3, #9
 8002294:	687a      	ldr	r2, [r7, #4]
 8002296:	fb02 f303 	mul.w	r3, r2, r3
 800229a:	60fb      	str	r3, [r7, #12]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 800229c:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	1e5a      	subs	r2, r3, #1
 80022a2:	60fa      	str	r2, [r7, #12]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d1f9      	bne.n	800229c <RCC_Delay+0x1c>
}
 80022a8:	bf00      	nop
 80022aa:	3714      	adds	r7, #20
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bc80      	pop	{r7}
 80022b0:	4770      	bx	lr
 80022b2:	bf00      	nop
 80022b4:	20000008 	.word	0x20000008
 80022b8:	10624dd3 	.word	0x10624dd3

080022bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b086      	sub	sp, #24
 80022c0:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */
	uint8_t RegSettingA = HMC5883l_Enable_A;
 80022c2:	2370      	movs	r3, #112	; 0x70
 80022c4:	71fb      	strb	r3, [r7, #7]
	uint8_t RegSettingB = HMC5883l_Enable_B;
 80022c6:	23a0      	movs	r3, #160	; 0xa0
 80022c8:	71bb      	strb	r3, [r7, #6]
	uint8_t RegSettingMR = HMC5883l_MR;
 80022ca:	2300      	movs	r3, #0
 80022cc:	717b      	strb	r3, [r7, #5]
	Xaxis = 0;
 80022ce:	4b4e      	ldr	r3, [pc, #312]	; (8002408 <main+0x14c>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	801a      	strh	r2, [r3, #0]
	Yaxis = 0;
 80022d4:	4b4d      	ldr	r3, [pc, #308]	; (800240c <main+0x150>)
 80022d6:	2200      	movs	r2, #0
 80022d8:	801a      	strh	r2, [r3, #0]
	Zaxis = 0;
 80022da:	4b4d      	ldr	r3, [pc, #308]	; (8002410 <main+0x154>)
 80022dc:	2200      	movs	r2, #0
 80022de:	801a      	strh	r2, [r3, #0]
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80022e0:	f7fe f9b2 	bl	8000648 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80022e4:	f000 f8a0 	bl	8002428 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80022e8:	f000 f912 	bl	8002510 <MX_GPIO_Init>
  MX_I2C1_Init();
 80022ec:	f000 f8e2 	bl	80024b4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */


  HAL_I2C_Mem_Write(&hi2c1, HMC5883l_ADDRESS, 0x00 , 1, &RegSettingA , 1, 100);
 80022f0:	2364      	movs	r3, #100	; 0x64
 80022f2:	9302      	str	r3, [sp, #8]
 80022f4:	2301      	movs	r3, #1
 80022f6:	9301      	str	r3, [sp, #4]
 80022f8:	1dfb      	adds	r3, r7, #7
 80022fa:	9300      	str	r3, [sp, #0]
 80022fc:	2301      	movs	r3, #1
 80022fe:	2200      	movs	r2, #0
 8002300:	213c      	movs	r1, #60	; 0x3c
 8002302:	4844      	ldr	r0, [pc, #272]	; (8002414 <main+0x158>)
 8002304:	f7fe fd60 	bl	8000dc8 <HAL_I2C_Mem_Write>
  HAL_I2C_Mem_Write(&hi2c1, HMC5883l_ADDRESS, 0x01 , 1, &RegSettingB , 1, 100);
 8002308:	2364      	movs	r3, #100	; 0x64
 800230a:	9302      	str	r3, [sp, #8]
 800230c:	2301      	movs	r3, #1
 800230e:	9301      	str	r3, [sp, #4]
 8002310:	1dbb      	adds	r3, r7, #6
 8002312:	9300      	str	r3, [sp, #0]
 8002314:	2301      	movs	r3, #1
 8002316:	2201      	movs	r2, #1
 8002318:	213c      	movs	r1, #60	; 0x3c
 800231a:	483e      	ldr	r0, [pc, #248]	; (8002414 <main+0x158>)
 800231c:	f7fe fd54 	bl	8000dc8 <HAL_I2C_Mem_Write>
  HAL_I2C_Mem_Write(&hi2c1, HMC5883l_ADDRESS, 0x02 , 1, &RegSettingMR , 1, 100);
 8002320:	2364      	movs	r3, #100	; 0x64
 8002322:	9302      	str	r3, [sp, #8]
 8002324:	2301      	movs	r3, #1
 8002326:	9301      	str	r3, [sp, #4]
 8002328:	1d7b      	adds	r3, r7, #5
 800232a:	9300      	str	r3, [sp, #0]
 800232c:	2301      	movs	r3, #1
 800232e:	2202      	movs	r2, #2
 8002330:	213c      	movs	r1, #60	; 0x3c
 8002332:	4838      	ldr	r0, [pc, #224]	; (8002414 <main+0x158>)
 8002334:	f7fe fd48 	bl	8000dc8 <HAL_I2C_Mem_Write>
    /* USER CODE END WHILE */



	  // RECEIVE X_axis
	  HAL_I2C_Mem_Read(&hi2c1,HMC5883l_ADDRESS+1,HMC5883l_ADD_DATAX_MSB_MULTI,1,DataX,2,100);
 8002338:	2364      	movs	r3, #100	; 0x64
 800233a:	9302      	str	r3, [sp, #8]
 800233c:	2302      	movs	r3, #2
 800233e:	9301      	str	r3, [sp, #4]
 8002340:	4b35      	ldr	r3, [pc, #212]	; (8002418 <main+0x15c>)
 8002342:	9300      	str	r3, [sp, #0]
 8002344:	2301      	movs	r3, #1
 8002346:	2283      	movs	r2, #131	; 0x83
 8002348:	213d      	movs	r1, #61	; 0x3d
 800234a:	4832      	ldr	r0, [pc, #200]	; (8002414 <main+0x158>)
 800234c:	f7fe fe46 	bl	8000fdc <HAL_I2C_Mem_Read>
	  Xaxis = ((DataX[1]<<8) | DataX[0])/390.f;
 8002350:	4b31      	ldr	r3, [pc, #196]	; (8002418 <main+0x15c>)
 8002352:	785b      	ldrb	r3, [r3, #1]
 8002354:	021b      	lsls	r3, r3, #8
 8002356:	4a30      	ldr	r2, [pc, #192]	; (8002418 <main+0x15c>)
 8002358:	7812      	ldrb	r2, [r2, #0]
 800235a:	4313      	orrs	r3, r2
 800235c:	4618      	mov	r0, r3
 800235e:	f7fd ffaf 	bl	80002c0 <__aeabi_i2f>
 8002362:	4603      	mov	r3, r0
 8002364:	492d      	ldr	r1, [pc, #180]	; (800241c <main+0x160>)
 8002366:	4618      	mov	r0, r3
 8002368:	f7fe f8b2 	bl	80004d0 <__aeabi_fdiv>
 800236c:	4603      	mov	r3, r0
 800236e:	4618      	mov	r0, r3
 8002370:	f7fe f94a 	bl	8000608 <__aeabi_f2uiz>
 8002374:	4603      	mov	r3, r0
 8002376:	b29a      	uxth	r2, r3
 8002378:	4b23      	ldr	r3, [pc, #140]	; (8002408 <main+0x14c>)
 800237a:	801a      	strh	r2, [r3, #0]
	  // RECEIVE Y_axis
	  HAL_I2C_Mem_Read(&hi2c1,HMC5883l_ADDRESS+1,HMC5883l_ADD_DATAY_MSB_MULTI,1,DataY,2,100);
 800237c:	2364      	movs	r3, #100	; 0x64
 800237e:	9302      	str	r3, [sp, #8]
 8002380:	2302      	movs	r3, #2
 8002382:	9301      	str	r3, [sp, #4]
 8002384:	4b26      	ldr	r3, [pc, #152]	; (8002420 <main+0x164>)
 8002386:	9300      	str	r3, [sp, #0]
 8002388:	2301      	movs	r3, #1
 800238a:	2287      	movs	r2, #135	; 0x87
 800238c:	213d      	movs	r1, #61	; 0x3d
 800238e:	4821      	ldr	r0, [pc, #132]	; (8002414 <main+0x158>)
 8002390:	f7fe fe24 	bl	8000fdc <HAL_I2C_Mem_Read>
	  Yaxis = ((DataY[1]<<8) | DataY[0])/390.f;
 8002394:	4b22      	ldr	r3, [pc, #136]	; (8002420 <main+0x164>)
 8002396:	785b      	ldrb	r3, [r3, #1]
 8002398:	021b      	lsls	r3, r3, #8
 800239a:	4a21      	ldr	r2, [pc, #132]	; (8002420 <main+0x164>)
 800239c:	7812      	ldrb	r2, [r2, #0]
 800239e:	4313      	orrs	r3, r2
 80023a0:	4618      	mov	r0, r3
 80023a2:	f7fd ff8d 	bl	80002c0 <__aeabi_i2f>
 80023a6:	4603      	mov	r3, r0
 80023a8:	491c      	ldr	r1, [pc, #112]	; (800241c <main+0x160>)
 80023aa:	4618      	mov	r0, r3
 80023ac:	f7fe f890 	bl	80004d0 <__aeabi_fdiv>
 80023b0:	4603      	mov	r3, r0
 80023b2:	4618      	mov	r0, r3
 80023b4:	f7fe f928 	bl	8000608 <__aeabi_f2uiz>
 80023b8:	4603      	mov	r3, r0
 80023ba:	b29a      	uxth	r2, r3
 80023bc:	4b13      	ldr	r3, [pc, #76]	; (800240c <main+0x150>)
 80023be:	801a      	strh	r2, [r3, #0]
	  // RECEIVE Z_axis
	  HAL_I2C_Mem_Read(&hi2c1,HMC5883l_ADDRESS+1,HMC5883l_ADD_DATAZ_MSB_MULTI,1,DataZ,2,100);
 80023c0:	2364      	movs	r3, #100	; 0x64
 80023c2:	9302      	str	r3, [sp, #8]
 80023c4:	2302      	movs	r3, #2
 80023c6:	9301      	str	r3, [sp, #4]
 80023c8:	4b16      	ldr	r3, [pc, #88]	; (8002424 <main+0x168>)
 80023ca:	9300      	str	r3, [sp, #0]
 80023cc:	2301      	movs	r3, #1
 80023ce:	2285      	movs	r2, #133	; 0x85
 80023d0:	213d      	movs	r1, #61	; 0x3d
 80023d2:	4810      	ldr	r0, [pc, #64]	; (8002414 <main+0x158>)
 80023d4:	f7fe fe02 	bl	8000fdc <HAL_I2C_Mem_Read>
	  Zaxis = ((DataZ[1]<<8) | DataZ[0])/390.f;
 80023d8:	4b12      	ldr	r3, [pc, #72]	; (8002424 <main+0x168>)
 80023da:	785b      	ldrb	r3, [r3, #1]
 80023dc:	021b      	lsls	r3, r3, #8
 80023de:	4a11      	ldr	r2, [pc, #68]	; (8002424 <main+0x168>)
 80023e0:	7812      	ldrb	r2, [r2, #0]
 80023e2:	4313      	orrs	r3, r2
 80023e4:	4618      	mov	r0, r3
 80023e6:	f7fd ff6b 	bl	80002c0 <__aeabi_i2f>
 80023ea:	4603      	mov	r3, r0
 80023ec:	490b      	ldr	r1, [pc, #44]	; (800241c <main+0x160>)
 80023ee:	4618      	mov	r0, r3
 80023f0:	f7fe f86e 	bl	80004d0 <__aeabi_fdiv>
 80023f4:	4603      	mov	r3, r0
 80023f6:	4618      	mov	r0, r3
 80023f8:	f7fe f906 	bl	8000608 <__aeabi_f2uiz>
 80023fc:	4603      	mov	r3, r0
 80023fe:	b29a      	uxth	r2, r3
 8002400:	4b03      	ldr	r3, [pc, #12]	; (8002410 <main+0x154>)
 8002402:	801a      	strh	r2, [r3, #0]
	  HAL_I2C_Mem_Read(&hi2c1,HMC5883l_ADDRESS+1,HMC5883l_ADD_DATAX_MSB_MULTI,1,DataX,2,100);
 8002404:	e798      	b.n	8002338 <main+0x7c>
 8002406:	bf00      	nop
 8002408:	20000028 	.word	0x20000028
 800240c:	2000002a 	.word	0x2000002a
 8002410:	2000002c 	.word	0x2000002c
 8002414:	20000038 	.word	0x20000038
 8002418:	20000090 	.word	0x20000090
 800241c:	43c30000 	.word	0x43c30000
 8002420:	20000034 	.word	0x20000034
 8002424:	2000008c 	.word	0x2000008c

08002428 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b090      	sub	sp, #64	; 0x40
 800242c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800242e:	f107 0318 	add.w	r3, r7, #24
 8002432:	2228      	movs	r2, #40	; 0x28
 8002434:	2100      	movs	r1, #0
 8002436:	4618      	mov	r0, r3
 8002438:	f000 f9e0 	bl	80027fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800243c:	1d3b      	adds	r3, r7, #4
 800243e:	2200      	movs	r2, #0
 8002440:	601a      	str	r2, [r3, #0]
 8002442:	605a      	str	r2, [r3, #4]
 8002444:	609a      	str	r2, [r3, #8]
 8002446:	60da      	str	r2, [r3, #12]
 8002448:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800244a:	2301      	movs	r3, #1
 800244c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800244e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002452:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002454:	2300      	movs	r3, #0
 8002456:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002458:	2301      	movs	r3, #1
 800245a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800245c:	2302      	movs	r3, #2
 800245e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002460:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002464:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002466:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800246a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800246c:	f107 0318 	add.w	r3, r7, #24
 8002470:	4618      	mov	r0, r3
 8002472:	f7ff fb15 	bl	8001aa0 <HAL_RCC_OscConfig>
 8002476:	4603      	mov	r3, r0
 8002478:	2b00      	cmp	r3, #0
 800247a:	d001      	beq.n	8002480 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800247c:	f000 f8a0 	bl	80025c0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002480:	230f      	movs	r3, #15
 8002482:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002484:	2302      	movs	r3, #2
 8002486:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002488:	2300      	movs	r3, #0
 800248a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800248c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002490:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002492:	2300      	movs	r3, #0
 8002494:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002496:	1d3b      	adds	r3, r7, #4
 8002498:	2102      	movs	r1, #2
 800249a:	4618      	mov	r0, r3
 800249c:	f7ff fd64 	bl	8001f68 <HAL_RCC_ClockConfig>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d001      	beq.n	80024aa <SystemClock_Config+0x82>
  {
    Error_Handler();
 80024a6:	f000 f88b 	bl	80025c0 <Error_Handler>
  }
}
 80024aa:	bf00      	nop
 80024ac:	3740      	adds	r7, #64	; 0x40
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
	...

080024b4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80024b8:	4b12      	ldr	r3, [pc, #72]	; (8002504 <MX_I2C1_Init+0x50>)
 80024ba:	4a13      	ldr	r2, [pc, #76]	; (8002508 <MX_I2C1_Init+0x54>)
 80024bc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80024be:	4b11      	ldr	r3, [pc, #68]	; (8002504 <MX_I2C1_Init+0x50>)
 80024c0:	4a12      	ldr	r2, [pc, #72]	; (800250c <MX_I2C1_Init+0x58>)
 80024c2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80024c4:	4b0f      	ldr	r3, [pc, #60]	; (8002504 <MX_I2C1_Init+0x50>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80024ca:	4b0e      	ldr	r3, [pc, #56]	; (8002504 <MX_I2C1_Init+0x50>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80024d0:	4b0c      	ldr	r3, [pc, #48]	; (8002504 <MX_I2C1_Init+0x50>)
 80024d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80024d6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80024d8:	4b0a      	ldr	r3, [pc, #40]	; (8002504 <MX_I2C1_Init+0x50>)
 80024da:	2200      	movs	r2, #0
 80024dc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80024de:	4b09      	ldr	r3, [pc, #36]	; (8002504 <MX_I2C1_Init+0x50>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80024e4:	4b07      	ldr	r3, [pc, #28]	; (8002504 <MX_I2C1_Init+0x50>)
 80024e6:	2200      	movs	r2, #0
 80024e8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80024ea:	4b06      	ldr	r3, [pc, #24]	; (8002504 <MX_I2C1_Init+0x50>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80024f0:	4804      	ldr	r0, [pc, #16]	; (8002504 <MX_I2C1_Init+0x50>)
 80024f2:	f7fe fb65 	bl	8000bc0 <HAL_I2C_Init>
 80024f6:	4603      	mov	r3, r0
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d001      	beq.n	8002500 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80024fc:	f000 f860 	bl	80025c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002500:	bf00      	nop
 8002502:	bd80      	pop	{r7, pc}
 8002504:	20000038 	.word	0x20000038
 8002508:	40005400 	.word	0x40005400
 800250c:	000186a0 	.word	0x000186a0

08002510 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b088      	sub	sp, #32
 8002514:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002516:	f107 0310 	add.w	r3, r7, #16
 800251a:	2200      	movs	r2, #0
 800251c:	601a      	str	r2, [r3, #0]
 800251e:	605a      	str	r2, [r3, #4]
 8002520:	609a      	str	r2, [r3, #8]
 8002522:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002524:	4b24      	ldr	r3, [pc, #144]	; (80025b8 <MX_GPIO_Init+0xa8>)
 8002526:	699b      	ldr	r3, [r3, #24]
 8002528:	4a23      	ldr	r2, [pc, #140]	; (80025b8 <MX_GPIO_Init+0xa8>)
 800252a:	f043 0310 	orr.w	r3, r3, #16
 800252e:	6193      	str	r3, [r2, #24]
 8002530:	4b21      	ldr	r3, [pc, #132]	; (80025b8 <MX_GPIO_Init+0xa8>)
 8002532:	699b      	ldr	r3, [r3, #24]
 8002534:	f003 0310 	and.w	r3, r3, #16
 8002538:	60fb      	str	r3, [r7, #12]
 800253a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800253c:	4b1e      	ldr	r3, [pc, #120]	; (80025b8 <MX_GPIO_Init+0xa8>)
 800253e:	699b      	ldr	r3, [r3, #24]
 8002540:	4a1d      	ldr	r2, [pc, #116]	; (80025b8 <MX_GPIO_Init+0xa8>)
 8002542:	f043 0320 	orr.w	r3, r3, #32
 8002546:	6193      	str	r3, [r2, #24]
 8002548:	4b1b      	ldr	r3, [pc, #108]	; (80025b8 <MX_GPIO_Init+0xa8>)
 800254a:	699b      	ldr	r3, [r3, #24]
 800254c:	f003 0320 	and.w	r3, r3, #32
 8002550:	60bb      	str	r3, [r7, #8]
 8002552:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002554:	4b18      	ldr	r3, [pc, #96]	; (80025b8 <MX_GPIO_Init+0xa8>)
 8002556:	699b      	ldr	r3, [r3, #24]
 8002558:	4a17      	ldr	r2, [pc, #92]	; (80025b8 <MX_GPIO_Init+0xa8>)
 800255a:	f043 0304 	orr.w	r3, r3, #4
 800255e:	6193      	str	r3, [r2, #24]
 8002560:	4b15      	ldr	r3, [pc, #84]	; (80025b8 <MX_GPIO_Init+0xa8>)
 8002562:	699b      	ldr	r3, [r3, #24]
 8002564:	f003 0304 	and.w	r3, r3, #4
 8002568:	607b      	str	r3, [r7, #4]
 800256a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800256c:	4b12      	ldr	r3, [pc, #72]	; (80025b8 <MX_GPIO_Init+0xa8>)
 800256e:	699b      	ldr	r3, [r3, #24]
 8002570:	4a11      	ldr	r2, [pc, #68]	; (80025b8 <MX_GPIO_Init+0xa8>)
 8002572:	f043 0308 	orr.w	r3, r3, #8
 8002576:	6193      	str	r3, [r2, #24]
 8002578:	4b0f      	ldr	r3, [pc, #60]	; (80025b8 <MX_GPIO_Init+0xa8>)
 800257a:	699b      	ldr	r3, [r3, #24]
 800257c:	f003 0308 	and.w	r3, r3, #8
 8002580:	603b      	str	r3, [r7, #0]
 8002582:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002584:	2200      	movs	r2, #0
 8002586:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800258a:	480c      	ldr	r0, [pc, #48]	; (80025bc <MX_GPIO_Init+0xac>)
 800258c:	f7fe fb00 	bl	8000b90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002590:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002594:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002596:	2301      	movs	r3, #1
 8002598:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800259a:	2300      	movs	r3, #0
 800259c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800259e:	2302      	movs	r3, #2
 80025a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025a2:	f107 0310 	add.w	r3, r7, #16
 80025a6:	4619      	mov	r1, r3
 80025a8:	4804      	ldr	r0, [pc, #16]	; (80025bc <MX_GPIO_Init+0xac>)
 80025aa:	f7fe f993 	bl	80008d4 <HAL_GPIO_Init>

}
 80025ae:	bf00      	nop
 80025b0:	3720      	adds	r7, #32
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	40021000 	.word	0x40021000
 80025bc:	40011000 	.word	0x40011000

080025c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80025c0:	b480      	push	{r7}
 80025c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80025c4:	bf00      	nop
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bc80      	pop	{r7}
 80025ca:	4770      	bx	lr

080025cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b085      	sub	sp, #20
 80025d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80025d2:	4b15      	ldr	r3, [pc, #84]	; (8002628 <HAL_MspInit+0x5c>)
 80025d4:	699b      	ldr	r3, [r3, #24]
 80025d6:	4a14      	ldr	r2, [pc, #80]	; (8002628 <HAL_MspInit+0x5c>)
 80025d8:	f043 0301 	orr.w	r3, r3, #1
 80025dc:	6193      	str	r3, [r2, #24]
 80025de:	4b12      	ldr	r3, [pc, #72]	; (8002628 <HAL_MspInit+0x5c>)
 80025e0:	699b      	ldr	r3, [r3, #24]
 80025e2:	f003 0301 	and.w	r3, r3, #1
 80025e6:	60bb      	str	r3, [r7, #8]
 80025e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80025ea:	4b0f      	ldr	r3, [pc, #60]	; (8002628 <HAL_MspInit+0x5c>)
 80025ec:	69db      	ldr	r3, [r3, #28]
 80025ee:	4a0e      	ldr	r2, [pc, #56]	; (8002628 <HAL_MspInit+0x5c>)
 80025f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025f4:	61d3      	str	r3, [r2, #28]
 80025f6:	4b0c      	ldr	r3, [pc, #48]	; (8002628 <HAL_MspInit+0x5c>)
 80025f8:	69db      	ldr	r3, [r3, #28]
 80025fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025fe:	607b      	str	r3, [r7, #4]
 8002600:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002602:	4b0a      	ldr	r3, [pc, #40]	; (800262c <HAL_MspInit+0x60>)
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	60fb      	str	r3, [r7, #12]
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800260e:	60fb      	str	r3, [r7, #12]
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002616:	60fb      	str	r3, [r7, #12]
 8002618:	4a04      	ldr	r2, [pc, #16]	; (800262c <HAL_MspInit+0x60>)
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800261e:	bf00      	nop
 8002620:	3714      	adds	r7, #20
 8002622:	46bd      	mov	sp, r7
 8002624:	bc80      	pop	{r7}
 8002626:	4770      	bx	lr
 8002628:	40021000 	.word	0x40021000
 800262c:	40010000 	.word	0x40010000

08002630 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b088      	sub	sp, #32
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002638:	f107 0310 	add.w	r3, r7, #16
 800263c:	2200      	movs	r2, #0
 800263e:	601a      	str	r2, [r3, #0]
 8002640:	605a      	str	r2, [r3, #4]
 8002642:	609a      	str	r2, [r3, #8]
 8002644:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a15      	ldr	r2, [pc, #84]	; (80026a0 <HAL_I2C_MspInit+0x70>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d123      	bne.n	8002698 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002650:	4b14      	ldr	r3, [pc, #80]	; (80026a4 <HAL_I2C_MspInit+0x74>)
 8002652:	699b      	ldr	r3, [r3, #24]
 8002654:	4a13      	ldr	r2, [pc, #76]	; (80026a4 <HAL_I2C_MspInit+0x74>)
 8002656:	f043 0308 	orr.w	r3, r3, #8
 800265a:	6193      	str	r3, [r2, #24]
 800265c:	4b11      	ldr	r3, [pc, #68]	; (80026a4 <HAL_I2C_MspInit+0x74>)
 800265e:	699b      	ldr	r3, [r3, #24]
 8002660:	f003 0308 	and.w	r3, r3, #8
 8002664:	60fb      	str	r3, [r7, #12]
 8002666:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002668:	23c0      	movs	r3, #192	; 0xc0
 800266a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800266c:	2312      	movs	r3, #18
 800266e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002670:	2303      	movs	r3, #3
 8002672:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002674:	f107 0310 	add.w	r3, r7, #16
 8002678:	4619      	mov	r1, r3
 800267a:	480b      	ldr	r0, [pc, #44]	; (80026a8 <HAL_I2C_MspInit+0x78>)
 800267c:	f7fe f92a 	bl	80008d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002680:	4b08      	ldr	r3, [pc, #32]	; (80026a4 <HAL_I2C_MspInit+0x74>)
 8002682:	69db      	ldr	r3, [r3, #28]
 8002684:	4a07      	ldr	r2, [pc, #28]	; (80026a4 <HAL_I2C_MspInit+0x74>)
 8002686:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800268a:	61d3      	str	r3, [r2, #28]
 800268c:	4b05      	ldr	r3, [pc, #20]	; (80026a4 <HAL_I2C_MspInit+0x74>)
 800268e:	69db      	ldr	r3, [r3, #28]
 8002690:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002694:	60bb      	str	r3, [r7, #8]
 8002696:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002698:	bf00      	nop
 800269a:	3720      	adds	r7, #32
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	40005400 	.word	0x40005400
 80026a4:	40021000 	.word	0x40021000
 80026a8:	40010c00 	.word	0x40010c00

080026ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026ac:	b480      	push	{r7}
 80026ae:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80026b0:	bf00      	nop
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bc80      	pop	{r7}
 80026b6:	4770      	bx	lr

080026b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026b8:	b480      	push	{r7}
 80026ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026bc:	e7fe      	b.n	80026bc <HardFault_Handler+0x4>

080026be <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026be:	b480      	push	{r7}
 80026c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026c2:	e7fe      	b.n	80026c2 <MemManage_Handler+0x4>

080026c4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026c4:	b480      	push	{r7}
 80026c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026c8:	e7fe      	b.n	80026c8 <BusFault_Handler+0x4>

080026ca <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80026ca:	b480      	push	{r7}
 80026cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026ce:	e7fe      	b.n	80026ce <UsageFault_Handler+0x4>

080026d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80026d0:	b480      	push	{r7}
 80026d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80026d4:	bf00      	nop
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bc80      	pop	{r7}
 80026da:	4770      	bx	lr

080026dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80026dc:	b480      	push	{r7}
 80026de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80026e0:	bf00      	nop
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bc80      	pop	{r7}
 80026e6:	4770      	bx	lr

080026e8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80026e8:	b480      	push	{r7}
 80026ea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80026ec:	bf00      	nop
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bc80      	pop	{r7}
 80026f2:	4770      	bx	lr

080026f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80026f8:	f7fd ffec 	bl	80006d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80026fc:	bf00      	nop
 80026fe:	bd80      	pop	{r7, pc}

08002700 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002700:	b480      	push	{r7}
 8002702:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002704:	4b15      	ldr	r3, [pc, #84]	; (800275c <SystemInit+0x5c>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a14      	ldr	r2, [pc, #80]	; (800275c <SystemInit+0x5c>)
 800270a:	f043 0301 	orr.w	r3, r3, #1
 800270e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002710:	4b12      	ldr	r3, [pc, #72]	; (800275c <SystemInit+0x5c>)
 8002712:	685a      	ldr	r2, [r3, #4]
 8002714:	4911      	ldr	r1, [pc, #68]	; (800275c <SystemInit+0x5c>)
 8002716:	4b12      	ldr	r3, [pc, #72]	; (8002760 <SystemInit+0x60>)
 8002718:	4013      	ands	r3, r2
 800271a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800271c:	4b0f      	ldr	r3, [pc, #60]	; (800275c <SystemInit+0x5c>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a0e      	ldr	r2, [pc, #56]	; (800275c <SystemInit+0x5c>)
 8002722:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002726:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800272a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800272c:	4b0b      	ldr	r3, [pc, #44]	; (800275c <SystemInit+0x5c>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a0a      	ldr	r2, [pc, #40]	; (800275c <SystemInit+0x5c>)
 8002732:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002736:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002738:	4b08      	ldr	r3, [pc, #32]	; (800275c <SystemInit+0x5c>)
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	4a07      	ldr	r2, [pc, #28]	; (800275c <SystemInit+0x5c>)
 800273e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8002742:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8002744:	4b05      	ldr	r3, [pc, #20]	; (800275c <SystemInit+0x5c>)
 8002746:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800274a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800274c:	4b05      	ldr	r3, [pc, #20]	; (8002764 <SystemInit+0x64>)
 800274e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002752:	609a      	str	r2, [r3, #8]
#endif 
}
 8002754:	bf00      	nop
 8002756:	46bd      	mov	sp, r7
 8002758:	bc80      	pop	{r7}
 800275a:	4770      	bx	lr
 800275c:	40021000 	.word	0x40021000
 8002760:	f8ff0000 	.word	0xf8ff0000
 8002764:	e000ed00 	.word	0xe000ed00

08002768 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002768:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800276a:	e003      	b.n	8002774 <LoopCopyDataInit>

0800276c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800276c:	4b0b      	ldr	r3, [pc, #44]	; (800279c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800276e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002770:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002772:	3104      	adds	r1, #4

08002774 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002774:	480a      	ldr	r0, [pc, #40]	; (80027a0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002776:	4b0b      	ldr	r3, [pc, #44]	; (80027a4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002778:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800277a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800277c:	d3f6      	bcc.n	800276c <CopyDataInit>
  ldr r2, =_sbss
 800277e:	4a0a      	ldr	r2, [pc, #40]	; (80027a8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002780:	e002      	b.n	8002788 <LoopFillZerobss>

08002782 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002782:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002784:	f842 3b04 	str.w	r3, [r2], #4

08002788 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002788:	4b08      	ldr	r3, [pc, #32]	; (80027ac <LoopFillZerobss+0x24>)
  cmp r2, r3
 800278a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800278c:	d3f9      	bcc.n	8002782 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800278e:	f7ff ffb7 	bl	8002700 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002792:	f000 f80f 	bl	80027b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002796:	f7ff fd91 	bl	80022bc <main>
  bx lr
 800279a:	4770      	bx	lr
  ldr r3, =_sidata
 800279c:	08002858 	.word	0x08002858
  ldr r0, =_sdata
 80027a0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80027a4:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 80027a8:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 80027ac:	2000009c 	.word	0x2000009c

080027b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80027b0:	e7fe      	b.n	80027b0 <ADC1_2_IRQHandler>
	...

080027b4 <__libc_init_array>:
 80027b4:	b570      	push	{r4, r5, r6, lr}
 80027b6:	2500      	movs	r5, #0
 80027b8:	4e0c      	ldr	r6, [pc, #48]	; (80027ec <__libc_init_array+0x38>)
 80027ba:	4c0d      	ldr	r4, [pc, #52]	; (80027f0 <__libc_init_array+0x3c>)
 80027bc:	1ba4      	subs	r4, r4, r6
 80027be:	10a4      	asrs	r4, r4, #2
 80027c0:	42a5      	cmp	r5, r4
 80027c2:	d109      	bne.n	80027d8 <__libc_init_array+0x24>
 80027c4:	f000 f822 	bl	800280c <_init>
 80027c8:	2500      	movs	r5, #0
 80027ca:	4e0a      	ldr	r6, [pc, #40]	; (80027f4 <__libc_init_array+0x40>)
 80027cc:	4c0a      	ldr	r4, [pc, #40]	; (80027f8 <__libc_init_array+0x44>)
 80027ce:	1ba4      	subs	r4, r4, r6
 80027d0:	10a4      	asrs	r4, r4, #2
 80027d2:	42a5      	cmp	r5, r4
 80027d4:	d105      	bne.n	80027e2 <__libc_init_array+0x2e>
 80027d6:	bd70      	pop	{r4, r5, r6, pc}
 80027d8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80027dc:	4798      	blx	r3
 80027de:	3501      	adds	r5, #1
 80027e0:	e7ee      	b.n	80027c0 <__libc_init_array+0xc>
 80027e2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80027e6:	4798      	blx	r3
 80027e8:	3501      	adds	r5, #1
 80027ea:	e7f2      	b.n	80027d2 <__libc_init_array+0x1e>
 80027ec:	08002850 	.word	0x08002850
 80027f0:	08002850 	.word	0x08002850
 80027f4:	08002850 	.word	0x08002850
 80027f8:	08002854 	.word	0x08002854

080027fc <memset>:
 80027fc:	4603      	mov	r3, r0
 80027fe:	4402      	add	r2, r0
 8002800:	4293      	cmp	r3, r2
 8002802:	d100      	bne.n	8002806 <memset+0xa>
 8002804:	4770      	bx	lr
 8002806:	f803 1b01 	strb.w	r1, [r3], #1
 800280a:	e7f9      	b.n	8002800 <memset+0x4>

0800280c <_init>:
 800280c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800280e:	bf00      	nop
 8002810:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002812:	bc08      	pop	{r3}
 8002814:	469e      	mov	lr, r3
 8002816:	4770      	bx	lr

08002818 <_fini>:
 8002818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800281a:	bf00      	nop
 800281c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800281e:	bc08      	pop	{r3}
 8002820:	469e      	mov	lr, r3
 8002822:	4770      	bx	lr
